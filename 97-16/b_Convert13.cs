#pragma warning disable
using UnityEngine;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using Mono.Data.Sqlite;
using System.Data;
using System.Linq;
using TMPro;

namespace MaxyGames.Generated {
	public class b_Convert13 : MaxyGames.RuntimeBehaviour {
		private string cachedValue;
		public Dictionary<string, SqliteConnection> sql_Connections = new Dictionary<string, SqliteConnection>();
		public Dictionary<string, SqliteCommand> sql_cmnds = new Dictionary<string, SqliteCommand>();
		public Dictionary<string, SqliteDataReader> sql_readers = new Dictionary<string, SqliteDataReader>();
		public string[] Files = new string[0];
		public Dictionary<string, string> bd_names = new Dictionary<string, string>();
		public GameObject objectVariable;
		public GameObject objectVariable1;
		public GameObject objectVariable2;
		public GameObject objectVariable3;
		private int index1;
		private int index2;
		private int index6;
		private List<int> delimetrs1 = new List<int>();

		private void Update() {
			string variable0 = "";
		}

		public void button() {
			//–°–æ–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –±–¥
			bd_names();
			Files = Directory.GetFiles("D:\\__job\\2022\\13_—é—Ñ–æ_–µ–∂–µ–º–µ—Å—è—á–Ω–∏–∫–∏\\txt\\", "*13_13*.txt");
			objectVariable.gameObject.GetComponent<TMPro.TMP_Text>().text = Files.Length.ToString();
			base.StartCoroutine(convert_mainLoop());
		}

		public System.Collections.IEnumerator convert_mainLoop() {
			string fPath = "";
			for(int index = 0; index < Files.Length; index += 1) {
				fPath = Files[index];
				objectVariable1.gameObject.GetComponent<TMPro.TMP_Text>().text = fPath;
				objectVariable2.gameObject.GetComponent<TMPro.TMP_Text>().text = (index + 1).ToString();
				sql_log(fPath, "");
				yield return selector_loop(fPath);
				Debug.Log("–°–ª–µ–¥ —Ñ–∞–π–ª");
			}
			Debug.Log("!–ó–∞–∫–æ–Ω—á–µ–Ω–æ!");
		}

		public System.Collections.IEnumerator selector_loop(string path) {
			string file_data = "";
			string One_table_data = "";
			string N_table = "";
			string N_year_N_month1 = "";
			List<string> _rowUnparsed = new List<string>();
			List<string> _rowUnparsed0 = new List<string>();
			List<string> tables = new List<string>();
			List<List<string>> Qtable = new List<List<string>>();
			Dictionary<string, string> months = new Dictionary<string, string>() { { "–Ø–ù–í–ê–†–¨", "1" }, { "–§–ï–í–†–ê–õ–¨", "2" }, { "–ú–ê–†–¢", "3" }, { "–ê–ü–†–ï–õ–¨", "4" }, { "–ú–ê–ô", "5" }, { "–ò–Æ–ù–¨", "6" }, { "–ò–Æ–õ–¨", "7" }, { "–ê–í–ì–£–°–¢", "8" }, { "–°–ï–ù–¢–Ø–ë–†–¨", "9" }, { "–û–ö–¢–Ø–ë–†–¨", "10" }, { "–ù–û–Ø–ë–†–¨", "11" }, { "–î–ï–ö–ê–ë–†–¨", "12" } };
			string N_year_N_month_FromHeader = "";
			string tmp_tblName = "";
			file_data = File.ReadAllText(path).Replace("", "").Replace("", "");
			tables = Enumerable.ToList<System.String>(file_data.Trim().Split("–¢–∞–±–ª–∏", System.StringSplitOptions.RemoveEmptyEntries));
			foreach(string loopObject in tables) {
				One_table_data = loopObject;
				//–ü—Ä–æ–ø—É—Å–∫–∞–µ–º "—Ç–∞–±–ª–∏—Ü—ã" –≥–¥–µ –º–Ω–æ–≥–æ —Ç–æ—á–µ–∫ = –º–µ–Ω—é –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
				if((!(One_table_data.Contains(".....")) && One_table_data.StartsWith("—Ü–∞"))) {
					//Get Number of table
					N_table = Regex.Match(One_table_data, "—Ü–∞\\D*(\\w+)", RegexOptions.None).Result("$1");
					//–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
					objectVariable3.gameObject.GetComponent<TMPro.TMP_Text>().text = N_table;
					switch(N_table) {
						case "1": {
							yield return n1(One_table_data);
							yield return new WaitForEndOfFrame();
						}
						break;
						case "2": {
						}
						break;
						case "4": {
						}
						break;
						case "6": {
						}
						break;
						case "7": {
						}
						break;
						case "8": {
						}
						break;
						case "11": {
						}
						break;
						case "12": {
						}
						break;
						case "13": {
						}
						break;
						case "14": {
						}
						break;
						case "15": {
						}
						break;
						case "16": {
						}
						break;
						case "17": {
						}
						break;
						case "19": {
						}
						break;
					}
				}
			}
			sql_close();
		}
		/// <summary>
		/// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ. 
		/// </summary>
		private bool sql_connect(string db_name) {
			string path = "";
			SqliteConnection connection = default(SqliteConnection);
			path = Application.streamingAssetsPath + "/" + "files/bd/" + db_name + ".sqlite";
			if(sql_Connections.ContainsKey(db_name)) {
				return true;
			} else {
				//–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π –±–¥ –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
				if(!(File.Exists(path))) {
					//–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π –±–¥ –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
					if(db_name.StartsWith("y_")) {
						File.Copy(Application.streamingAssetsPath + "/" + "files/bd/" + "_emptyY" + ".sqlite", path, false);
					} else {
						File.Copy(Application.streamingAssetsPath + "/" + "files/bd/" + "_empty" + ".sqlite", path, false);
					}
				}
				connection = new SqliteConnection("URI=file:" + path);
				connection.Open();
				//–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
				sql_Connections.Add(db_name, connection);
			}
			return File.Exists(path);
		}

		/// <summary>
		/// –Ω–∏—Ñ–∏–≥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—á–µ–º—É —Ç–æ, –Ω–∞ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü.
		/// </summary>
		public void sql_close() {
			foreach(KeyValuePair<string, SqliteCommand> loopObject5 in sql_cmnds) {
				loopObject5.Value.Dispose();
			}
			foreach(KeyValuePair<string, SqliteConnection> loopObject6 in sql_Connections) {
				loopObject6.Value.Dispose();
			}
			SqliteConnection.ClearAllPools();
			System.GC.Collect();
			System.GC.WaitForPendingFinalizers();
			SqliteConnection.ClearAllPools();
			System.GC.Collect();
			System.GC.WaitForPendingFinalizers();
			sql_Connections = new Dictionary<string, SqliteConnection>();
			sql_readers = new Dictionary<string, SqliteDataReader>();
			sql_cmnds = new Dictionary<string, SqliteCommand>();
		}

		/// <summary>
		/// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ –±–¥
		/// –ù–µ–Ω—É–∂–µ–Ω?
		/// </summary>
		private List<string> sql_master_tables(string db_name) {
			List<string> tables1 = new List<string>();
			tables1.Clear();
			if(sql_connect(db_name)) {
				using(SqliteCommand value = sql_Connections[db_name].CreateCommand()) {
					sql_cmnds.Add(db_name, value);
					sql_cmnds[db_name].CommandText = "SELECT name FROM sqlite_master WHERE type='table'";
					sql_readers.Add(db_name, sql_cmnds[db_name].ExecuteReader());
					while(sql_readers[db_name].Read()) {
						tables1.Add(sql_readers[db_name].GetString(0));
					}
				}
			}
			return tables1;
		}

		/// <summary>
		/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –≤—Å—Ç–∞–≤–∫—É
		/// </summary>
		private int sql_insertQ(string db_name, string q) {
			int sql_writed = 0;
			SqliteCommand cmnd = new SqliteCommand();
			if(sql_connect(db_name)) {
				using(SqliteCommand value1 = sql_Connections[db_name].CreateCommand()) {
					cmnd = value1;
					cmnd.CommandText = q;
					sql_writed = cmnd.ExecuteReader().RecordsAffected;
				}
			} else {
				new _utillz()._2log("sql_insertQ.connect.error", true);
			}
			return sql_writed;
		}


		/// <summary>
		/// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ –±–¥
		/// not need?
		/// </summary>
		private List<string> sql_headers(string db_name) {
			SqliteCommand cmnd1 = new SqliteCommand();
			SqliteDataReader reader = default(SqliteDataReader);
			if(sql_connect(db_name)) {
				cmnd1 = sql_Connections[db_name].CreateCommand();
				cmnd1.CommandText = "PRAGMA table_info (1) ";
				reader = cmnd1.ExecuteReader();
				while(reader.Read()) {
					new _utillz()._2log((reader.GetValue(1) as string), false);
				}
			}
			return new List<string>();
		}

		public void sql_log(string parameter, string parameter2) {
			sql_insertQ("_log", "INSERT INTO log VALUES('" + parameter + parameter2 + "')");
		}

		public void bd_names() {
			bd_names.Clear();
			//–°–ø–∏—Å–æ–∫ –Ω–∞ –∑–∞–º–µ–Ω—É –Ω–∞–∑–≤–∞–Ω–∏–π —Å "—Ä—É—Å—Å–∫–æ–≥–æ" –Ω–∞ –†—É—Å—Å–∫–∏–π
			foreach(string loopObject8 in File.ReadAllText(Application.streamingAssetsPath + "/" + "tmp.txt").Split(System.Environment.NewLine, System.StringSplitOptions.RemoveEmptyEntries)) {
				bd_names.Add(loopObject8.Split(new char[] { '=' })[1], loopObject8.Split(new char[] { '=' })[0]);
			}
		}

		public System.Collections.IEnumerator n1(string one_table_data) {
			string N_year_N_month = "";
			List<string> rows_unparsed = new List<string>();
			string splt_row = "";
			HashSet<int> splt_hash_ints = new HashSet<int>();
			List<int> delimetrs = new List<int>();
			string row_line = "";
			List<string> row_parsed = new List<string>();
			string row_bd_name = "";
			int row_from = 0;
			int row_length = 0;
			List<List<string>> table_parsed = new List<List<string>>();
			List<string> sql_row = new List<string>();
			string sql_bd_name = "";
			string sql_q = "";
			//–í–æ–∑–º–æ–∂–Ω–æ –≤—ã—Ç–∞—â–∏—Ç—å –∏–∑ —Å–≤–∏—Ç—á–∞?
			N_year_N_month = Regex.Match(one_table_data, "–ì–æ–¥\\D*(\\d+)", RegexOptions.None).Result("y$1_m13");
			//–†–∞—Å–ø–∏–ª–∫–∞
			foreach(string loopObject9 in one_table_data.Split(System.Environment.NewLine, System.StringSplitOptions.None)) {
				rows_unparsed.Add(loopObject9);
			}
			yield return new WaitForEndOfFrame();
			//–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π —Å—Ç–æ–ª–±—Ü–æ–≤
			foreach(string loopObject10 in rows_unparsed) {
				//–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ö–æ–¥–æ–≤ –ø–æ —Ç–∞–±–ª–∏—Ü–µ, —á—Ç–æ –± –Ω–µ –≤—Å—é –ø—Ä–≤–æ–µ—Ä—è—Ç—å
				if(!(Regex.IsMatch(loopObject10.Trim(), "^ *\\d{1,3}\\."))) {
					splt_row = loopObject10;
					//–ë–µ–≥–∞–µ—Ç –ø–æ —Å—Ç—Ä–æ–∫–µ - –∏—â–µ—Ç –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π
					for(index6 = splt_row.IndexOfAny(new char[] { '‚ï¶', '‚î¨', '|', '¬¶' }); index6 > -1; index6 = splt_row.IndexOfAny(new char[] { '‚î¨', '‚ï¶', '|', '¬¶' }, (index6 + 1))) {
						splt_hash_ints.Add(index6);
					}
				}
			}
			delimetrs = Enumerable.ToList<System.Int32>(splt_hash_ints);
			delimetrs.Sort();
			yield return new WaitForEndOfFrame();
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject11 in rows_unparsed) {
				row_line = loopObject11;
				//–ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å –Ω–æ–º–µ—Ä —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º (–ø—Ä–æ—Å—Ç–æ–π —Å–ª—É—á–∞–π)
				if(Regex.IsMatch(row_line.Trim(), "^\\d{1,3}\\.")) {
					//–ø–µ—Ä–≤—ã–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–¥
					if(bd_names.TryGetValue(Regex.Match(row_line.Substring(0, (delimetrs[0] - 1)), "\\D*\\d+\\.(.+)", RegexOptions.None).Result("$1").Trim().Replace(',', '_'), out row_bd_name)) {
						//–∏–º—è –±–¥ —Ñ–∞–π–ª–∞, —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ
						row_parsed.Add(row_bd_name);
					} else {
						Debug.Log("–ù–µ—Ç—É –≤ —Å–ø–∏—Å–∫–µ –±–¥:" + row_bd_name);
					}
					//–æ—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ —Ä–∞—Å–ø–∞—Ä—Å–∞ —Å—Ç—Ä–æ–∫–∏
					for(int index7 = 0; index7 < (delimetrs.Count - 1); index7 += 1) {
						row_from = delimetrs[index7];
						row_length = (delimetrs[(index7 + 1)] - row_from);
						//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ—á–∫—É. –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ @
						if((row_line.Length > row_from)) {
							if((row_line.Length >= (row_from + row_length))) {
								//–ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ –∏ –≤—Å—è —è—á–µ–π–∫–∞ —á—Ç–æ —Ç–æ –∏–º–µ–µ—Ç
								row_parsed.Add(row_line.Substring(row_from, row_length).Trim());
							} else {
								//–ï—Å–ª–∏ –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ —è—á–µ–π–∫–µ, –Ω–æ —á—Ç–æ —Ç–æ –µ—Å—Ç—å
								row_parsed.Add(row_line.Substring(row_from, (row_line.Length - row_from)).Trim());
							}
						} else {
							//–µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É
							row_parsed.Add("@");
						}
					}
					//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ—á–∫—É. –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ @
					if((row_line.Length > delimetrs[delimetrs.Count - 1])) {
						if((row_line.Length >= (delimetrs[delimetrs.Count - 1] + (row_line.Length - delimetrs[delimetrs.Count - 1])))) {
							//last. –µ—Å–ª–∏ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –º–µ—Å—Ç–µ.
							row_parsed.Add(row_line.Substring(delimetrs[delimetrs.Count - 1], (row_line.Length - delimetrs[delimetrs.Count - 1])).Trim());
						} else {
							//last. –µ—Å–ª–∏ –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
							row_parsed.Add(row_line.Substring(delimetrs[delimetrs.Count - 1], (row_line.Length - delimetrs[delimetrs.Count - 1])).Trim());
						}
					} else {
						//last. –µ—Å–ª–∏ —è—á–µ–π–∫–∞ —Å–æ–≤—Å–µ–º –ø—É—Å—Ç–∞—è
						row_parsed.Add("@");
					}
					table_parsed.Add(row_parsed);
					row_parsed = new List<string>();
				}
			}
			yield return new WaitForEndOfFrame();
			//–≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–¥
			foreach(List<string> loopObject12 in table_parsed) {
				sql_row = loopObject12;
				sql_bd_name = "y_" + sql_row[0];
				loopObject12.RemoveAt(0);
				sql_q = "INSERT OR IGNORE INTO '" + "1" + "' " + "VALUES ('" + N_year_N_month + "','" + string.Join<System.String>("','", sql_row) + "')";
				if(sql_insertQ(sql_bd_name, sql_q).Equals(0)) {
					Debug.Log("–í –±–¥:===" + sql_bd_name + " ===—É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ —Å—Ç—Ä–æ—á–∫–∞===" + sql_q);
				}
			}
		}
	}
}
