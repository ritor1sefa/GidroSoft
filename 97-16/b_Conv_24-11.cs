#pragma warning disable
using UnityEngine;
using System.Collections.Generic;
using System.IO;
using System.Data;
using System.Text;
using System.Linq;
using System.Text.RegularExpressions;
using Mono.Data.Sqlite;
using TMPro;
using System.Globalization;

namespace MaxyGames.Generated {
	public class b_Conv_24-11 : MaxyGames.RuntimeBehaviour {
		public string[] Files = new string[0];
		public Dictionary<string, string> bd_names = new Dictionary<string, string>();
		public List<string> rows_unparsed = new List<string>();
		public List<int> delimetrs = new List<int>();
		public string NameOfDB = "";
		public List<string> bd_names_array = new List<string>();
		public string Year = "";
		public string Month = "";
		public Dictionary<string, string> simpleTables = new Dictionary<string, string>();
		public Dictionary<string, string> namedTables = new Dictionary<string, string>();
		public string wet_cor_m = "";
		public GameObject objectVariable;
		public GameObject objectVariable1;
		public GameObject objectVariable2;
		private int index2;
		private List<int> delimetrs1 = new List<int>();

		private void Update() {
			if(Input.GetKeyUp(KeyCode.UpArrow)) {
				//–µ—Å–ª–∏ —ç—Ç–æ —É–±—Ä–∞—Ç—å, —Ç–æ parseRow2List —è—Ä–æ—Å—Ç–Ω–æ –±–∞–≥—É–µ—Ç, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞.. 
				Debug.Log(new Regex("[^0-9.-]*").Replace("-0.02 ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ     -0‚îÇ     0‚îÇ    0 ‚îÇ      ‚îÇ    0 ‚îÇ      ‚îÇ 3.20", ""));
			}
		}

		public void button() {
			//–°–æ–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –±–¥
			bd_names();
			Files = Directory.GetFiles("Z:\\", "*.txt");
			objectVariable.gameObject.GetComponent<TMPro.TMP_Text>().text = Files.Length.ToString();
			base.StartCoroutine(convert_mainLoop());
		}

		public void bd_names() {
			bd_names.Clear();
			//–°–ø–∏—Å–æ–∫ –Ω–∞ –∑–∞–º–µ–Ω—É –Ω–∞–∑–≤–∞–Ω–∏–π —Å "—Ä—É—Å—Å–∫–æ–≥–æ" –Ω–∞ –†—É—Å—Å–∫–∏–π
			foreach(string loopObject in File.ReadAllText(Application.streamingAssetsPath + "/" + "tmp.txt").Split(System.Environment.NewLine, System.StringSplitOptions.RemoveEmptyEntries)) {
				if(!(bd_names.ContainsKey(loopObject.Split(new char[] { '=' })[1].ToLower()))) {
					bd_names.Add(loopObject.Split(new char[] { '=' })[1].ToLower(), loopObject.Split(new char[] { '=' })[0]);
				}
			}
		}

		public System.Collections.IEnumerator convert_mainLoop() {
			string fPath = "";
			string q2 = "";
			string tmp_q = "";
			bd_names_array = new List<string>();
			for(int index = 0; index < Files.Length; index += 1) {
				fPath = Files[index];
				objectVariable1.gameObject.GetComponent<TMPro.TMP_Text>().text = fPath;
				objectVariable2.gameObject.GetComponent<TMPro.TMP_Text>().text = (index + 1).ToString();
				yield return selector_loop(fPath);
				Debug.Log("=–°–ª–µ–¥ —Ñ–∞–π–ª");
			}
			Debug.Log("–ó–∞–∫–æ–Ω—á–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤.");
			yield return new WaitForEndOfFrame();
			//–ø–µ—Ä–µ–±–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ—Å—Ç–æ–≤-—Ñ–∞–π–ª–æ–≤ –±–¥
			foreach(string loopObject1 in bd_names_array) {
				yield return sql_simple(loopObject1);
				yield return sql_named(loopObject1);
			}
		}

		public System.Collections.IEnumerator selector_loop(string path) {
			string file_data = "";
			string One_table_data = "";
			List<string> _rowUnparsed = new List<string>();
			List<string> _rowUnparsed0 = new List<string>();
			List<string> tables = new List<string>();
			List<List<string>> Qtable = new List<List<string>>();
			Dictionary<string, string> months = new Dictionary<string, string>() { { "–Ø–ù–í–ê–†–¨", "1" }, { "–§–ï–í–†–ê–õ–¨", "2" }, { "–ú–ê–†–¢", "3" }, { "–ê–ü–†–ï–õ–¨", "4" }, { "–ú–ê–ô", "5" }, { "–ò–Æ–ù–¨", "6" }, { "–ò–Æ–õ–¨", "7" }, { "–ê–í–ì–£–°–¢", "8" }, { "–°–ï–ù–¢–Ø–ë–†–¨", "9" }, { "–û–ö–¢–Ø–ë–†–¨", "10" }, { "–ù–û–Ø–ë–†–¨", "11" }, { "–î–ï–ö–ê–ë–†–¨", "12" } };
			string N_year_N_month_FromHeader = "";
			string tmp_tblName = "";
			if(Regex.IsMatch(Path.GetFileName(path), "(^\\D*)(\\d+)-(\\d+)")) {
				Year = Regex.Match(Path.GetFileName(path), "(^\\D*)(\\d+)-(\\d+)").Result("$3");
				Month = Regex.Match(Path.GetFileName(path), "(^\\D*)(\\d+)-(\\d+)").Result("$2");
				//–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞, –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ –∂–µ –ø–æ—Ç–æ–º –ø—Ä–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ bd_names
				NameOfDB = Regex.Match(Path.GetFileName(path), "(^\\D*)(\\d+)-(\\d+)").Result("$1").Trim();
				//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ —Å–ø–∏—Å–∫–µ. –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å, —Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å, —á—Ç–æ –±—ã –ø–æ—Ç–æ–º –ª–∏—à–Ω–∏–π —Ä–∞–∑ –Ω–µ –±–µ–≥–∞—Ç—å
				if(!(bd_names_array.Contains(NameOfDB))) {
					//–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –±–¥ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ sql –∏–Ω–∂–µ–∫—Ç–∞
					bd_names_array.Add(NameOfDB);
				}
				file_data = new Regex("^(.*.*).+$", RegexOptions.Multiline).Replace(File.ReadAllText(path), "");
				//–ï—Å–ª–∏ –µ—Å—Ç—å - —Ç–æ —ç—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–∞–π–ª, –∏ –ø–æ—Å—Ç –∫ —Ç–æ–º—É –∂–µ
				if(file_data.Contains("–¢ –ê –ë –õ –ò –¶ –´    –ú –ï –¢ –ï –û –† –û –õ –û –ì –ò –ß –ï –° –ö –ò –•   –ù –ê –ë –õ –Æ –î –ï –ù –ò –ô       –¢ –ú –ü")) {
					Debug.Log("–¢ –ú –ü");
					wet_cor_m = "";
					//"–í–°–ï–ú–ò–†–ù–û–ï"==–¥–ª–∏–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¢–ú–ù. –ï—Å–ª–∏ –Ω–µ—Ç == –∫–æ—Ä–æ—Ç–∫–∏–π
					if(file_data.Contains("–í–°–ï–ú–ò–†–ù–û–ï")) {
						if(Regex.IsMatch(file_data, "—É—á–∞—Å—Ç–∫–∞:.+\\|\\s+(\\S+)\\s+\\|")) {
							wet_cor_m = new Regex("—É—á–∞—Å—Ç–∫–∞:.+\\|\\s+(\\S+)\\s+\\|", RegexOptions.Multiline).Match(file_data).Result("$1");
						} else {
							Debug.Log("2–ü–æ–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–º–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ—Ç—É!");
						}
						//1 –° –£ –¢ –û –ß –ù –´ –ï   –î –ê –ù –ù –´ –ï, –û—Å–∞–¥–∫–∏, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
						yield return TMN_L_n2_1(file_data.Substring(file_data.IndexOf("–°—Ç—Ä. 2"), (file_data.IndexOf("–°—Ç—Ä. 3") - file_data.IndexOf("–°—Ç—Ä. 2"))));
						//2–° –£ –¢ –û –ß –ù –´ –ï   –î –ê –ù –ù –´ –ï
						yield return TMN_L_n2_2_n3(file_data.Substring(file_data.IndexOf("–°—Ç—Ä. 3"), (file_data.IndexOf("–°—Ç—Ä. 4") - file_data.IndexOf("–°—Ç—Ä. 3"))));
						//–ú –ï –° –Ø –ß –ù –´ –ï   –í –´ –í –û –î –´
						yield return TMN_L_t1_t7_1_t16(file_data.Substring(file_data.IndexOf("–°—Ç—Ä. 4"), (file_data.IndexOf("–ß–ò–°–õ–û –î–ù–ï–ô –° –û–°–ê–î–ö–ê–ú–ò –ü–û –ì–†–ê–î–ê–¶–ò–Ø–ú, –ù–ï –ú–ï–ù–ï–ï (–ú–ú)") - file_data.IndexOf("–°—Ç—Ä. 4"))));
						//–ß–ò–°–õ–û –î–ù–ï–ô –° –û–°–ê–î–ö–ê–ú–ò –ü–û –ì–†–ê–î–ê–¶–ò–Ø–ú, –ù–ï –ú–ï–ù–ï–ï (–ú–ú)
						yield return TMN_L_t7_2_t11(file_data.Substring((file_data.IndexOf("–ß–ò–°–õ–û –î–ù–ï–ô –° –û–°–ê–î–ö–ê–ú–ò –ü–û –ì–†–ê–î–ê–¶–ò–Ø–ú, –ù–ï –ú–ï–ù–ï–ï (–ú–ú)") - 20)));
					} else {
						if(Regex.IsMatch(file_data, "–ú–µ—Å—è—Ü\\s*(\\S+)\\s*–º–º")) {
							wet_cor_m = new Regex("–ú–µ—Å—è—Ü\\s*(\\S+)\\s*–º–º", RegexOptions.Multiline).Match(file_data).Result("$1");
						} else {
							Debug.Log("1–ü–æ–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–º–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ—Ç—É!");
						}
						//–°–∫–ª–µ–∏–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
						One_table_data = mergeTable(file_data.Substring(file_data.IndexOfAny(new char[] { '‚ïê', '=' }), (file_data.IndexOf("–£–°–õ–û–í–ù–´–ï –û–ë–û–ó–ù–ê–ß–ï–ù–ò–Ø –ê–¢–ú–û–°–§–ï–†–ù–´–• –Ø–í–õ–ï–ù–ò–ô") - file_data.IndexOfAny(new char[] { '‚ïê', '=' }))));
						//–°–º–µ—à–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (—Ç–∞ —á—Ç–æ —Å–ª–µ–≤–∞)
						yield return TMN_S_n2_n3(One_table_data.Substring(0, One_table_data.IndexOf("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞, –≥—Ä–∞–¥—É—Å—ã")));
						//–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞, –≥—Ä–∞–¥—É—Å—ã
						yield return TMN_S_t1_t16(One_table_data.Substring((One_table_data.IndexOf("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞, –≥—Ä–∞–¥—É—Å—ã") - 20), (One_table_data.IndexOf("–ö–û–õ–ò–ß–ï–°–¢–í–û –û–°–ê–î–ö–û–í, –ú–ú") - One_table_data.IndexOf("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞, –≥—Ä–∞–¥—É—Å—ã"))));
						//–ö–û–õ–ò–ß–ï–°–¢–í–û –û–°–ê–î–ö–û–í, –ú–ú
						yield return TMN_S_t7_1(One_table_data.Substring(One_table_data.IndexOf("–ö–û–õ–ò–ß–ï–°–¢–í–û –û–°–ê–î–ö–û–í, –ú–ú"), (One_table_data.IndexOf("–ß–ò–°–õ–û –î–ù–ï–ô –° –û–°–ê–î–ö–ê–ú–ò –ü–û –ì–†–ê–î–ê–¶–ò–Ø") - One_table_data.IndexOf("–ö–û–õ–ò–ß–ï–°–¢–í–û –û–°–ê–î–ö–û–í, –ú–ú"))));
						//–ß–ò–°–õ–û –î–ù–ï–ô –° –û–°–ê–î–ö–ê–ú–ò –ü–û –ì–†–ê–î–ê–¶–ò–Ø
						yield return TMN_S_t7_2(One_table_data.Substring(One_table_data.IndexOf("–ß–ò–°–õ–û –î–ù–ï–ô –° –û–°–ê–î–ö–ê–ú–ò –ü–û –ì–†–ê–î–ê–¶–ò–Ø"), (One_table_data.IndexOf("–° –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–º–∏ —è–≤–ª–µ–Ω–∏—è–º–∏") - One_table_data.IndexOf("–ß–ò–°–õ–û –î–ù–ï–ô –° –û–°–ê–î–ö–ê–ú–ò –ü–û –ì–†–ê–î–ê–¶–ò–Ø"))));
						//–° –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–º–∏ —è–≤–ª–µ–Ω–∏—è–º–∏
						yield return TMN_S_t11(One_table_data.Substring((One_table_data.IndexOf("–° –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–º–∏ —è–≤–ª–µ–Ω–∏—è–º–∏") - 20)));
						if(file_data.Contains("–û –ü –ê –° –ù –´ –ï   –ì –ò –î –† –û –ú –ï –¢ –ï –û –† –û –õ –û –ì –ò –ß –ï –° –ö –ò –ï   –Ø –í –õ –ï –ù –ò –Ø")) {
							//–û–Ø, —Å–Ω–µ–≥
							One_table_data = file_data.Substring(file_data.IndexOf("–û –ü –ê –° –ù –´ –ï   –ì –ò –î –† –û –ú –ï –¢ –ï –û –† –û –õ –û –ì –ò –ß –ï –° –ö –ò –ï   –Ø –í –õ –ï –ù –ò –Ø"), (file_data.Length - file_data.IndexOf("–û –ü –ê –° –ù –´ –ï   –ì –ò –î –† –û –ú –ï –¢ –ï –û –† –û –õ –û –ì –ò –ß –ï –° –ö –ò –ï   –Ø –í –õ –ï –ù –ò –Ø")));
							if(One_table_data.Contains("–ì/–ú –Ø–í–õ–ï–ù–ò–Ø")) {
								Debug.Log("–ì/–ú –Ø–í–õ–ï–ù–ò–Ø, –°–ù–ï–ì–û–°–™–ï–ú–ö–ò, –ì/–ò –û–¢–õ–û–ñ–ï–ù–ò–Ø");
								if(One_table_data.Contains("–í–∏–¥ —è–≤–ª–µ–Ω–∏—è")) {
									Debug.Log("=14=–°–¢–ò–•–ò–ô–ù–´–ï –ì/–ú –Ø–í–õ–ï–ù–ò–Ø");
									yield return t14(One_table_data.Substring(0, One_table_data.IndexOf("–ö –æ –Ω –µ —Ü   —Ç –∞ –± –ª –∏ —Ü —ã   —Å   –¥ –∞ –Ω –Ω —ã –º –∏   –æ –±   –û –Ø")));
								} else if(One_table_data.Contains("–ú–∞—Ä—à—Ä—É—Ç")) {
									Debug.Log("=16=–° –ù –ï –ñ –ù –´ –ô   –ü –û –ö –† –û –í");
									yield return t16(One_table_data.Substring(One_table_data.IndexOf("–° –ù –ï –ñ –ù –´ –ô   –ü –û –ö –† –û –í"), (One_table_data.IndexOf(" –ö –æ –Ω –µ —Ü   —Ç –∞ –± –ª –∏ —Ü —ã   —Å   —Ä –µ –∑ —É –ª —å —Ç –∞ —Ç –∞ –º –∏   —Å –Ω –µ –≥ –æ —Å —ä –µ –º –æ –∫") - One_table_data.IndexOf("–° –ù –ï –ñ –ù –´ –ô   –ü –û –ö –† –û –í"))));
								} else if(One_table_data.Contains("–ì–û–õ–û–õ–ï–î–ù–û-–ò–ó–ú–û–†–û–ó–ï–í–´–ú–ò  –û–¢–õ–û–ñ–ï–ù–ò–Ø–ú–ò")) {
									Debug.Log("=22=–ì–û–õ–û–õ–ï–î–ù–û-–ò–ó–ú–û–†–û–ó–ï–í–´–ú–ò  –û–¢–õ–û–ñ–ï–ù–ò–Ø–ú–ò");
									yield return t22(One_table_data.Substring(One_table_data.IndexOf("–ì–û–õ–û–õ–ï–î–ù–û-–ò–ó–ú–û–†–û–ó–ï–í–´–ú–ò  –û–¢–õ–û–ñ–ï–ù–ò–Ø–ú–ò"), (One_table_data.IndexOf("–ö–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –∑–∞ –≥/–∏ –æ—Ç–ª–æ–∂–µ–Ω–∏—è–º–∏") - One_table_data.IndexOf("–ì–û–õ–û–õ–ï–î–ù–û-–ò–ó–ú–û–†–û–ó–ï–í–´–ú–ò  –û–¢–õ–û–ñ–ï–ù–ò–Ø–ú–ò"))));
								}
							}
						}
					}
				} else {
					tables = Enumerable.ToList<System.String>(file_data.Trim().Split("–°—Ç–∞–Ω—Ü–∏—è", System.StringSplitOptions.RemoveEmptyEntries));
					foreach(string loopObject2 in tables) {
						One_table_data = loopObject2;
						if(One_table_data.Contains("–ê—Ç–º. –¥–∞–≤–ª–µ–Ω–∏–µ,")) {
							Debug.Log("=n1");
							yield return n1(One_table_data);
						} else if(One_table_data.Contains("–° –£ –¢ –û –ß –ù –´ –ï   –î –ê –ù –ù –´ –ï")) {
							Debug.Log("=n2");
							yield return n2(One_table_data);
						} else if(One_table_data.Contains("–ê –¢ –ú –û –° –§ –ï –† –ù –´ –ï   –Ø –í –õ –ï –ù –ò –Ø")) {
							Debug.Log("=n3");
							yield return n3(One_table_data);
						} else if(One_table_data.Contains("–ú –ï –° –Ø –ß –ù –´ –ï   –í –´ –í –û –î –´")) {
							Debug.Log("–ú –ï –° –Ø –ß –ù –´ –ï   –í –´ –í –û –î –´");
							yield return n4_1(One_table_data.TrimEnd().Substring(0, One_table_data.TrimEnd().IndexOf("–ß –∏ —Å –ª –æ   —Å –ª —É —á –∞ –µ –≤   –ø –æ   –≥ —Ä –∞ –¥ –∞ —Ü –∏ —è –º")));
							yield return n4_2(One_table_data.TrimEnd().Substring(One_table_data.TrimEnd().IndexOf("–ß –∏ —Å –ª –æ   —Å –ª —É —á –∞ –µ –≤   –ø –æ   –≥ —Ä –∞ –¥ –∞ —Ü –∏ —è –º"), (One_table_data.TrimEnd().IndexOf("–ß–∏—Å–ª–æ –¥–Ω–µ–π —Å –æ—Å–∞–¥–∫–∞–º–∏ –ø–æ –≥—Ä–∞–¥–∞—Ü–∏—è–º") - One_table_data.TrimEnd().IndexOf("–ß –∏ —Å –ª –æ   —Å –ª —É —á –∞ –µ –≤   –ø –æ   –≥ —Ä –∞ –¥ –∞ —Ü –∏ —è –º"))));
							yield return n4_3(One_table_data.TrimEnd().Substring(One_table_data.TrimEnd().IndexOf("–ß–∏—Å–ª–æ –¥–Ω–µ–π —Å –æ—Å–∞–¥–∫–∞–º–∏ –ø–æ –≥—Ä–∞–¥–∞—Ü–∏—è–º")));
						} else if(One_table_data.Contains("–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê –ü–û–ß–í–´ –ù–ê –ì–õ–£–ë. –ó–ê –°–£–¢–ö–ò, –≥—Ä–∞–¥")) {
							Debug.Log("=20-21=–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê –ü–û–ß–í–´ –ù–ê –ì–õ–£–ë. –ó–ê –°–£–¢–ö–ò, –≥—Ä–∞–¥");
							yield return t20_21(One_table_data);
						} else if(One_table_data.Contains("–ì/–ú –Ø–í–õ–ï–ù–ò–Ø")) {
							Debug.Log("–ì/–ú –Ø–í–õ–ï–ù–ò–Ø, –°–ù–ï–ì–û–°–™–ï–ú–ö–ò, –ì/–ò –û–¢–õ–û–ñ–ï–ù–ò–Ø");
							if(One_table_data.Contains("–í–∏–¥ —è–≤–ª–µ–Ω–∏—è")) {
								Debug.Log("=14=–°–¢–ò–•–ò–ô–ù–´–ï –ì/–ú –Ø–í–õ–ï–ù–ò–Ø");
								yield return t14(One_table_data.Substring(0, One_table_data.IndexOf("–ö –æ –Ω –µ —Ü   —Ç –∞ –± –ª –∏ —Ü —ã   —Å   –¥ –∞ –Ω –Ω —ã –º –∏   –æ –±   –û –Ø")));
							} else if(One_table_data.Contains("–ú–∞—Ä—à—Ä—É—Ç")) {
								Debug.Log("=16=–° –ù –ï –ñ –ù –´ –ô   –ü –û –ö –† –û –í");
								yield return t16(One_table_data.Substring(One_table_data.IndexOf("–° –ù –ï –ñ –ù –´ –ô   –ü –û –ö –† –û –í"), (One_table_data.IndexOf(" –ö –æ –Ω –µ —Ü   —Ç –∞ –± –ª –∏ —Ü —ã   —Å   —Ä –µ –∑ —É –ª —å —Ç –∞ —Ç –∞ –º –∏   —Å –Ω –µ –≥ –æ —Å —ä –µ –º –æ –∫") - One_table_data.IndexOf("–° –ù –ï –ñ –ù –´ –ô   –ü –û –ö –† –û –í"))));
							} else if(One_table_data.Contains("–ì–û–õ–û–õ–ï–î–ù–û-–ò–ó–ú–û–†–û–ó–ï–í–´–ú–ò  –û–¢–õ–û–ñ–ï–ù–ò–Ø–ú–ò")) {
								Debug.Log("=22=–ì–û–õ–û–õ–ï–î–ù–û-–ò–ó–ú–û–†–û–ó–ï–í–´–ú–ò  –û–¢–õ–û–ñ–ï–ù–ò–Ø–ú–ò");
								yield return t22(One_table_data.Substring(One_table_data.IndexOf("–ì–û–õ–û–õ–ï–î–ù–û-–ò–ó–ú–û–†–û–ó–ï–í–´–ú–ò  –û–¢–õ–û–ñ–ï–ù–ò–Ø–ú–ò"), (One_table_data.IndexOf("–ö–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –∑–∞ –≥/–∏ –æ—Ç–ª–æ–∂–µ–Ω–∏—è–º–∏") - One_table_data.IndexOf("–ì–û–õ–û–õ–ï–î–ù–û-–ò–ó–ú–û–†–û–ó–ï–í–´–ú–ò  –û–¢–õ–û–ñ–ï–ù–ò–Ø–ú–ò"))));
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ. 
		/// </summary>
		private bool sql_dbExists(string db_name) {
			string path = "";
			SqliteConnection connection3 = default(SqliteConnection);
			path = Application.streamingAssetsPath + "/" + "files/bd/" + db_name + ".sqlite";
			//–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π –±–¥ –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
			if(!(File.Exists(path))) {
				//–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π –±–¥ –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
				File.Copy(Application.streamingAssetsPath + "/" + "files/" + "_emptyNew" + ".sqlite", path, false);
			}
			return File.Exists(path);
		}

		/// <summary>
		/// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ –±–¥
		/// </summary>
		private List<string> sql_master_tables(string db_name) {
			List<string> tables1 = new List<string>();
			SqliteCommand cmnd = default(SqliteCommand);
			SqliteDataReader reader = default(SqliteDataReader);
			SqliteConnection connection = new SqliteConnection();
			string path1 = "";
			tables1.Clear();
			path1 = UnityEngine.Device.Application.streamingAssetsPath + "/" + "files/bd/" + db_name + ".sqlite";
			if(sql_dbExists(db_name)) {
				using(SqliteConnection value = new SqliteConnection("URI=file:" + path1)) {
					connection = value;
					connection.Open();
					cmnd = connection.CreateCommand();
					cmnd.CommandText = "SELECT name FROM sqlite_master WHERE type='table'";
					reader = cmnd.ExecuteReader();
					while(reader.Read()) {
						tables1.Add(reader.GetString(0));
					}
				}
			}
			return tables1;
		}

		/// <summary>
		/// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ –±–¥
		/// </summary>
		private List<string> sql_headers(string db_name) {
			SqliteCommand cmnd3 = new SqliteCommand();
			SqliteDataReader reader1 = default(SqliteDataReader);
		}

		public void sql_log(string parameter, string parameter2) {}

		/// <summary>
		/// split2Rows
		/// </summary>
		private List<string> split2Rows(string data2SplittingROWS) {
			rows_unparsed = new List<string>();
			//–†–∞—Å–ø–∏–ª–∫–∞
			foreach(string loopObject3 in data2SplittingROWS.Split(System.Environment.NewLine, System.StringSplitOptions.RemoveEmptyEntries)) {
				rows_unparsed.Add(loopObject3);
			}
			return rows_unparsed;
		}

		/// <summary>
		/// getDelims
		/// </summary>
		public System.Collections.IEnumerator getDelims(string one_table_data) {
			string delim_row = "";
			int delim_rowCount = 10;
			HashSet<int> delim_hash_ints = new HashSet<int>();
			rows_unparsed.Clear();
			yield return split2Rows(one_table_data);
			//–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏-—Å—Ç–æ–ª–±—Ü—ã
			if((rows_unparsed.Count < 10)) {
				delim_rowCount = rows_unparsed.Count;
			}
			for(int index1 = 0; index1 < delim_rowCount; index1 += 1) {
				delim_row = rows_unparsed[index1];
				//–ë–µ–≥–∞–µ—Ç –ø–æ —Å—Ç—Ä–æ–∫–µ - –∏—â–µ—Ç –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π
				for(index2 = delim_row.IndexOfAny(new char[] { 'I', '|', '‚ïë', '‚îÇ' }); index2 > -1; index2 = delim_row.IndexOfAny(new char[] { 'I', '|', '‚ïë', '‚îÇ' }, (index2 + 1))) {
					delim_hash_ints.Add((index2 + 1));
				}
			}
			delimetrs = Enumerable.ToList<System.Int32>(delim_hash_ints);
			delimetrs.Sort();
			yield return new WaitForEndOfFrame();
		}

		/// <summary>
		/// mergeTable
		/// </summary>
		public string mergeTable(string toSplitingCLMNS) {
			int _1thLenght = 0;
			string row = "";
			int rowL = 0;
			int tmp_hulf = 0;
			string clmn_1th = "";
			string clmn_2th = "";
			if(Regex.IsMatch(toSplitingCLMNS, "(^\\s*={3,}|^\\s*‚ïê{3,})(\\s*={3,}|\\s*‚ïê{3,})", RegexOptions.Multiline)) {
				_1thLenght = Regex.Match(toSplitingCLMNS, "(^\\s*={3,}|^\\s*‚ïê{3,})(\\s*={3,}|\\s*‚ïê{3,})", RegexOptions.Multiline).Result("$1").Length;
				clmn_1th = "";
				clmn_2th = "";
				foreach(string loopObject4 in split2Rows(toSplitingCLMNS)) {
					row = loopObject4;
					rowL = row.Length;
					if(!(string.IsNullOrWhiteSpace(row))) {
						if((rowL > _1thLenght)) {
							tmp_hulf = _1thLenght;
							clmn_2th = clmn_2th + System.Environment.NewLine + row.Substring(tmp_hulf, (rowL - tmp_hulf));
						} else {
							tmp_hulf = rowL;
						}
						clmn_1th = clmn_1th + System.Environment.NewLine + row.Substring(0, tmp_hulf);
						tmp_hulf = _1thLenght;
					}
				}
			} else {
				Debug.Log("–ù–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ä–∞—Å–ø–∏–ª–∫–∏!");
			}
			return clmn_1th + "" + clmn_2th;
		}

		/// <summary>
		/// sql –≤—Å—Ç–∞–≤–∫–∞ Simple —Ç–∞–±–ª–∏—Ü –≤ —Ñ–∞–π–ª—ã.
		/// </summary>
		private System.Collections.IEnumerator sql_simple(string db_name) {
			int sql_writed = 0;
			SqliteCommand cmnd1 = new SqliteCommand();
			SqliteConnection connection1 = new SqliteConnection();
			string path2 = "";
			string q = "";
			int add_new = 0;
			string t_key = "";
			string Ntable = "";
			path2 = UnityEngine.Device.Application.streamingAssetsPath + "/" + "files/bd/" + db_name + ".sqlite";
			if(sql_dbExists(db_name)) {
				using(SqliteConnection value1 = new SqliteConnection("URI=file:" + path2)) {
					connection1 = value1;
					connection1.Open();
					sql_writed = 0;
					//–ø–µ—Ä–µ–±–æ—Ä –ø–µ—Ä–≤–æ–π –æ—Å–æ–±–æ–π —Ç–∞–±–ª–∏—Ü—ã
					foreach(string loopObject5 in Enumerable.ToList<System.String>(simpleTables.Keys)) {
						t_key = loopObject5;
						Ntable = t_key.Split(new char[] { '&' })[1];
						//–ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∫–ª—é—á–µ–π —Å —Ç–µ–∫—É—â–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
						if(t_key.Contains(db_name)) {
							q = "INSERT OR IGNORE INTO '" + Ntable + "' " + "" + " VALUES ('" + simpleTables[t_key] + "" + "" + "')";
							//–£–¥–∞–ª—è–µ—Ç –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏ —Å–æ–≤–ø–∞–¥—ë–Ω–Ω–æ–µ
							simpleTables.Remove(t_key);
							using(SqliteCommand value2 = connection1.CreateCommand()) {
								cmnd1 = value2;
								cmnd1.CommandText = q;
								add_new = cmnd1.ExecuteReader().RecordsAffected;
								sql_writed = (add_new + sql_writed);
								if((add_new == 0)) {
									//–≤–æ—Ç–∫–Ω—É—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É - –Ω–∞ "—Ç–∞–∫–∏–µ –∂–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ –≤ –±–¥?"
									Debug.Log("–ü–æ–≤—Ç–æ—Ä:" + db_name + "=" + q);
								}
							}
							cmnd1.Cancel();
						}
					}
					Debug.Log("Simple" + "=–≤–Ω–µ—Å–µ–Ω–æ=" + sql_writed.ToString());
				}
				//–ü–∏—à–µ—Ç —á—Ç–æ –±–∞–∑–∞ –∑–∞–∫—Ä—ã—Ç–∞, –Ω–æ —Ñ–∞–π–ª —É–¥–∞–ª–∏—Ç—å –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—è —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —á—Ç–æ –∑–∞ —Ñ–∏–≥–Ω—è..
				Debug.Log(connection1.State.ToString());
				connection1 = null;
				SqliteConnection.ClearAllPools();
				System.GC.Collect();
				System.GC.WaitForPendingFinalizers();
			}
		}

		/// <summary>
		/// sql –≤—Å—Ç–∞–≤–∫–∞ —Ç–∞–±–ª–∏—Ü —Å –≤—ã–±–æ—Ä–æ—á–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏ –≤ —Ñ–∞–π–ª—ã.
		/// </summary>
		private System.Collections.IEnumerator sql_named(string db_name) {
			int sql_writed1 = 0;
			SqliteCommand cmnd2 = new SqliteCommand();
			SqliteConnection connection2 = new SqliteConnection();
			string path3 = "";
			string q1 = "";
			int add_new1 = 0;
			string t_key1 = "";
			string Ntable1 = "";
			path3 = UnityEngine.Device.Application.streamingAssetsPath + "/" + "files/bd/" + db_name + ".sqlite";
			if(sql_dbExists(db_name)) {
				using(SqliteConnection value3 = new SqliteConnection("URI=file:" + path3)) {
					connection2 = value3;
					connection2.Open();
					sql_writed1 = 0;
					//–ø–µ—Ä–µ–±–æ—Ä –ø–µ—Ä–≤–æ–π –æ—Å–æ–±–æ–π —Ç–∞–±–ª–∏—Ü—ã
					foreach(string loopObject6 in Enumerable.ToList<System.String>(namedTables.Keys)) {
						t_key1 = loopObject6;
						//–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –∫–ª—é—á–∞
						Ntable1 = t_key1.Split(new char[] { '&' })[1];
						//–ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∫–ª—é—á–µ–π —Å —Ç–µ–∫—É—â–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
						if(t_key1.Contains(db_name)) {
							q1 = "INSERT OR IGNORE INTO '" + Ntable1 + "' (" + namedTables[t_key1].Split(new char[] { '&' })[0] + ") VALUES (" + namedTables[t_key1].Split(new char[] { '&' })[1] + ")";
							//–£–¥–∞–ª—è–µ—Ç –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏ —Å–æ–≤–ø–∞–¥—ë–Ω–Ω–æ–µ
							namedTables.Remove(t_key1);
							using(SqliteCommand value4 = connection2.CreateCommand()) {
								cmnd2 = value4;
								cmnd2.CommandText = q1;
								add_new1 = cmnd2.ExecuteReader().RecordsAffected;
								sql_writed1 = (add_new1 + sql_writed1);
								if((add_new1 == 0)) {
									//–≤–æ—Ç–∫–Ω—É—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É - –Ω–∞ "—Ç–∞–∫–∏–µ –∂–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ –≤ –±–¥?"
									Debug.Log("–ü–æ–≤—Ç–æ—Ä:" + db_name + "=" + q1);
								}
							}
							cmnd2.Cancel();
						}
					}
					Debug.Log("Named" + "=–≤–Ω–µ—Å–µ–Ω–æ=" + sql_writed1.ToString());
				}
				//–ü–∏—à–µ—Ç —á—Ç–æ –±–∞–∑–∞ –∑–∞–∫—Ä—ã—Ç–∞, –Ω–æ —Ñ–∞–π–ª —É–¥–∞–ª–∏—Ç—å –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—è —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —á—Ç–æ –∑–∞ —Ñ–∏–≥–Ω—è..
				Debug.Log(connection2.State.ToString());
				connection2 = null;
				SqliteConnection.ClearAllPools();
				System.GC.Collect();
				System.GC.WaitForPendingFinalizers();
			}
		}

		/// <summary>
		/// n1
		/// </summary>
		public System.Collections.IEnumerator n1(string one_table_data) {
			string row_line = "";
			string row_1th = "";
			string row_2th = "";
			int row_day = 0;
			int row_dayPrev = 0;
			bool row_2th_bool = false;
			string row_cHour = "";
			int row_from = 0;
			int row_length = 0;
			string tmp_4sql_value = "";
			string tmp_key = "";
			yield return getDelims(one_table_data);
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject7 in rows_unparsed) {
				row_line = loopObject7;
				//–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å–∞ –¥–ª—è —Å—Ç—Ä–æ–∫ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ—á–∫–∞)
				if(Regex.IsMatch(row_line, "–ø–æ—è—Å–Ω–æ–µ.*\\((\\d+)\\D*(\\d+)")) {
					row_1th = Regex.Match(row_line, "–ø–æ—è—Å–Ω–æ–µ.*\\((\\d+)\\D*(\\d+)", RegexOptions.None).Result("$1");
					row_2th = Regex.Match(row_line, "–ø–æ—è—Å–Ω–æ–µ.*\\((\\d+)\\D*(\\d+)", RegexOptions.None).Result("$2");
				} else if(Regex.IsMatch(row_line, "^ *(\\d+)")) {
					row_day = int.Parse(Regex.Match(row_line, "^ *(\\d+)", RegexOptions.None).Result("$1"));
					//–ø–æ–∏—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞ (–ø–µ—Ä–≤–∞—è –∏ –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω—ã —Ç–∞–±–ª–∏—Ü—ã)
					if((row_day > row_dayPrev)) {
						row_dayPrev = row_day;
						row_cHour = row_1th;
					} else {
						row_cHour = row_2th;
					}
					//–¥–µ–Ω—å –º–µ—Å—è—Ü–∞-–ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
					tmp_4sql_value = "" + "y20" + Year + "_m" + Month + "_d" + row_day.ToString() + "_h" + row_cHour;
					//–æ—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ —Ä–∞—Å–ø–∞—Ä—Å–∞ —Å—Ç—Ä–æ–∫–∏
					for(int index3 = 0; index3 < (delimetrs.Count - 1); index3 += 1) {
						row_from = delimetrs[index3];
						row_length = (delimetrs[(index3 + 1)] - row_from);
						//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ—á–∫—É. –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ @
						if((row_line.Length > row_from)) {
							if((row_line.Length >= (row_from + row_length))) {
								//–ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ –∏ –≤—Å—è —è—á–µ–π–∫–∞ —á—Ç–æ —Ç–æ –∏–º–µ–µ—Ç
								tmp_4sql_value = tmp_4sql_value + "','" + row_line.Substring(row_from, row_length).Trim();
							} else {
								//–ï—Å–ª–∏ –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ —è—á–µ–π–∫–µ, –Ω–æ —á—Ç–æ —Ç–æ –µ—Å—Ç—å
								tmp_4sql_value = tmp_4sql_value + "','" + row_line.Substring(row_from, (row_line.Length - row_from)).Trim();
							}
						} else {
							//–µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É
							tmp_4sql_value = tmp_4sql_value + "','" + "";
						}
					}
					//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ—á–∫—É. –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ @
					if((row_line.Length > delimetrs[delimetrs.Count - 1])) {
						if((row_line.Length >= (delimetrs[delimetrs.Count - 1] + (row_line.Length - delimetrs[delimetrs.Count - 1])))) {
							//last. –µ—Å–ª–∏ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –º–µ—Å—Ç–µ.
							tmp_4sql_value = tmp_4sql_value + "','" + row_line.Substring(delimetrs[delimetrs.Count - 1], (row_line.Length - delimetrs[delimetrs.Count - 1])).Trim();
						} else {
							//last. –µ—Å–ª–∏ –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
							tmp_4sql_value = tmp_4sql_value + "','" + row_line.Substring(delimetrs[delimetrs.Count - 1], (row_line.Length - delimetrs[delimetrs.Count - 1])).Trim();
						}
					} else {
						//–µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É
						tmp_4sql_value = tmp_4sql_value + "','" + "";
					}
					tmp_key = NameOfDB + "&" + "n1" + "&" + "y20" + Year + "_m" + Month + "_d" + row_day.ToString() + "_h" + row_cHour;
					if(simpleTables.ContainsKey(tmp_key)) {
						//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
						Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key);
					} else {
						//–ó–∞—Å–æ–≤—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä–æ—á–∫—É –¥–ª—è sql
						simpleTables.Add(tmp_key, tmp_4sql_value);
					}
				}
			}
			yield return new WaitForEndOfFrame();
		}

		/// <summary>
		/// n2
		/// </summary>
		public System.Collections.IEnumerator n2(string one_table_data) {
			string row_line1 = "";
			int row_day1 = 0;
			int row_from1 = 0;
			int row_length1 = 0;
			string tmp_4sql_value1 = "";
			string tmp_key1 = "";
			yield return getDelims(one_table_data);
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject8 in rows_unparsed) {
				row_line1 = loopObject8;
				//break on
				if(row_line1.Contains("–°—Ä–µ–¥–Ω–∏–µ")) {
					break;
				} else if(Regex.IsMatch(row_line1, "^ *(\\d+)")) {
					row_day1 = int.Parse(Regex.Match(row_line1, "^ *(\\d+)", RegexOptions.None).Result("$1"));
					//–¥–µ–Ω—å –º–µ—Å—è—Ü–∞-–ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
					tmp_4sql_value1 = "" + "y20" + Year + "_m" + Month + "_d" + row_day1.ToString();
					//–æ—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ —Ä–∞—Å–ø–∞—Ä—Å–∞ —Å—Ç—Ä–æ–∫–∏
					for(int index4 = 0; index4 < (delimetrs.Count - 1); index4 += 1) {
						row_from1 = delimetrs[index4];
						row_length1 = (delimetrs[(index4 + 1)] - row_from1);
						//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ—á–∫—É. –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ @
						if((row_line1.Length > row_from1)) {
							if((row_line1.Length >= (row_from1 + row_length1))) {
								//–ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ –∏ –≤—Å—è —è—á–µ–π–∫–∞ —á—Ç–æ —Ç–æ –∏–º–µ–µ—Ç
								tmp_4sql_value1 = tmp_4sql_value1 + "','" + row_line1.Substring(row_from1, row_length1).Trim();
							} else {
								//–ï—Å–ª–∏ –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ —è—á–µ–π–∫–µ, –Ω–æ —á—Ç–æ —Ç–æ –µ—Å—Ç—å
								tmp_4sql_value1 = tmp_4sql_value1 + "','" + row_line1.Substring(row_from1, (row_line1.Length - row_from1)).Trim();
							}
						} else {
							//–µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É
							tmp_4sql_value1 = tmp_4sql_value1 + "','" + "";
						}
					}
					//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ—á–∫—É. –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ @
					if((row_line1.Length > delimetrs[delimetrs.Count - 1])) {
						if((row_line1.Length >= (delimetrs[delimetrs.Count - 1] + (row_line1.Length - delimetrs[delimetrs.Count - 1])))) {
							//last. –µ—Å–ª–∏ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –º–µ—Å—Ç–µ.
							tmp_4sql_value1 = tmp_4sql_value1 + "','" + row_line1.Substring(delimetrs[delimetrs.Count - 1], (row_line1.Length - delimetrs[delimetrs.Count - 1])).Trim();
						} else {
							//last. –µ—Å–ª–∏ –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
							tmp_4sql_value1 = tmp_4sql_value1 + "','" + row_line1.Substring(delimetrs[delimetrs.Count - 1], (row_line1.Length - delimetrs[delimetrs.Count - 1])).Trim();
						}
					} else {
						//–µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É
						tmp_4sql_value1 = tmp_4sql_value1 + "','" + "";
					}
					tmp_key1 = NameOfDB + "&n2&" + Year + "_" + Month + "_" + row_day1.ToString();
					if(namedTables.ContainsKey(tmp_key1)) {
						//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
						Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key1);
					} else {
						//–ó–∞—Å–æ–≤—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä–æ—á–∫—É –¥–ª—è sql
						namedTables.Add(tmp_key1, "'Year_Month_Day'," + "'t_–í–æ–∑–¥_—Å—Ä–µ–¥','t_–í–æ–∑–¥_–º–∞–∫—Å','t_–í–æ–∑–¥_–º–∏–Ω','t_–ü–æ–≤.–ü–æ—á–≤—ã_—Å—Ä–µ–¥','t_–ü–æ–≤.–ü–æ—á–≤—ã_–º–∞–∫—Å','t_–ü–æ–≤.–ü–æ—á–≤—ã_–º–∏–Ω','t_–¢–æ—á–∫–∏–†–æ—Å—ã_–º–∏–Ω','–ü–∞—Ä—Ü.–î–∞–≤–ª.–≤–æ–¥.–ø_–≥–ü–∞_—Å—Ä–µ–¥','–û—Ç–Ω.–í–ª_—Å—Ä–µ–¥','–û—Ç–Ω.–í–ª_–º–∏–Ω','–î–µ—Ñ.–ù–∞—Å—ã—â_–≥–ü–∞_—Å—Ä–µ–¥','–î–µ—Ñ.–ù–∞—Å—ã—â_–≥–ü–∞_–º–∞–∫—Å','–ê—Ç–º.–î–∞–≤_–Ω–∞–£—Ä.–°—Ç–∞–Ω—Ü–∏–∏','–ê—Ç–º.–î–∞–≤_–Ω–∞–£—Ä.–ú–æ—Ä—è','–•–∞—Ä–∞–∫—Ç.–æ–±–ª–∞—á–Ω_–®_–û','–•–∞—Ä–∞–∫—Ç.–æ–±–ª–∞—á–Ω_–®_–ù','–í–µ—Ç–µ—Ä_—Å—Ä–µ–¥','–í–µ—Ç–µ—Ä_–º–∞–∫—Å_–∏–∑8—Å—Ä–æ–∫','–í–µ—Ç–µ—Ä_–º–∞–∫—Å_–∞–±—Å–ú–∞–∫—Å','–û—Å–∞–¥–°—É—Ç–∫–∏_–°—É–º–º–∞','–°–æ—Å—Ç.–ø–æ–≤–µ—Ä—Ö–Ω.–ø–æ—á–≤—ã_–®','–°–Ω–ü–æ–∫—Ä–æ–≤_—Å—Ç.–ø–æ–∫—Ä','–°–Ω–ü–æ–∫—Ä–æ–≤_–≤—ã—Å–æ—Ç–∞_—Å–º'" + "&" + "'" + tmp_4sql_value1 + "'");
					}
				}
			}
			yield return new WaitForEndOfFrame();
		}

		/// <summary>
		/// n3
		/// </summary>
		public System.Collections.IEnumerator n3(string one_table_data) {
			string row_line2 = "";
			int row_day2 = 0;
			int row_dayPrev1 = 0;
			int row_from2 = 0;
			int row_length2 = 0;
			string tmp_key2 = "";
			Dictionary<int, string> tmp_Allday = new Dictionary<int, string>();
			string tmp_headers = "";
			string tmp_values12 = "";
			yield return getDelims(one_table_data);
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject9 in rows_unparsed) {
				row_line2 = loopObject9.TrimEnd();
				if(Regex.IsMatch(row_line2, "^ *(\\d+)")) {
					row_day2 = int.Parse(Regex.Match(row_line2, "^ *(\\d+)", RegexOptions.None).Result("$1"));
					row_dayPrev1 = row_day2;
				}
				//–ü—Ä–æ–ø—É—Å–∫ —à–∞–ø–∫–∏.
				//–í —Å—Ç—Ä–æ–∫–∞—Ö –±–µ–∑ –¥–Ω—è, –¥–µ–Ω—å=–ø—Ä–µ–¥—ã–¥—É—â–µ–º—É
				if((row_dayPrev1 != 0)) {
					row_from2 = delimetrs[1];
					row_length2 = row_line2.Length;
					//–ø—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç—É –Ω—É–∂–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
					if((row_length2 > row_from2)) {
						if(tmp_Allday.ContainsKey(row_day2)) {
							//–µ—Å–ª–∏ 3–π —Å—Ç–æ–ª–±–µ—Ü –Ω–µ –≤ –æ–¥–∏–Ω —Ä—è–¥, –∞ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ
							tmp_Allday[row_day2] = tmp_Allday[row_day2] + " " + row_line2.Substring(row_from2, (row_length2 - row_from2)).Trim();
						} else {
							//–µ—Å–ª–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
							tmp_Allday.Add(row_day2, row_line2.Substring(row_from2, (row_length2 - row_from2)).Trim());
						}
					}
				}
			}
			//–ü–∞—Ä—Å –ª–∏–±—ã –¥–Ω–µ–π –≤ –∫–æ–Ω–µ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç "–ø–æ—á—Ç–∏Sqlite"
			foreach(KeyValuePair<int, string> loopObject10 in tmp_Allday) {
				//–ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ –∏ –≤—Å—è —è—á–µ–π–∫–∞ —á—Ç–æ —Ç–æ –∏–º–µ–µ—Ç
				tmp_key2 = NameOfDB + "&" + "n3" + "&" + Year + "_" + Month + "_" + loopObject10.Key.ToString();
				if(namedTables.ContainsKey(tmp_key2)) {
					//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
					Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key2);
				} else {
					//–ó–∞—Å–æ–≤—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä–æ—á–∫—É –¥–ª—è sql
					namedTables.Add(tmp_key2, "'Year_Month_Day'," + new Regex("([–ê-–Ø–∞-—è]+)\\s*(\\d+)\\s*", RegexOptions.None).Replace(loopObject10.Value, "'$1',").TrimEnd(',').ToUpper() + "&" + "'" + "y20" + Year + "_m" + Month + "_d" + loopObject10.Key.ToString() + "'" + "," + new Regex("([–ê-–Ø–∞-—è]+)\\s*(\\d+)\\s*", RegexOptions.None).Replace(loopObject10.Value, "'$2',").Replace("00", "00.1").TrimEnd(','));
				}
			}
			yield return new WaitForEndOfFrame();
		}

		/// <summary>
		/// n4_1
		/// </summary>
		public System.Collections.IEnumerator n4_1(string one_table_data) {
			string row_line3 = "";
			int row_from3 = 0;
			int row_length3 = 0;
			string tmp_4sql_value2 = "";
			string tmp_key3 = "";
			yield return getDelims(one_table_data);
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject11 in rows_unparsed) {
				row_line3 = loopObject11;
				//–Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–∫–∞
				if(row_line3.Contains("–ü–æ–≤—Ç")) {
					//–¥–µ–Ω—å –º–µ—Å—è—Ü–∞-–ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
					tmp_4sql_value2 = "" + "y20" + Year + "_m" + Month;
					//–æ—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ —Ä–∞—Å–ø–∞—Ä—Å–∞ —Å—Ç—Ä–æ–∫–∏
					for(int index5 = 0; index5 < (delimetrs.Count - 1); index5 += 2) {
						row_from3 = delimetrs[index5];
						row_length3 = (delimetrs[(index5 + 1)] - row_from3);
						//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ—á–∫—É. –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ @
						if((row_line3.Length > row_from3)) {
							if((row_line3.Length >= (row_from3 + row_length3))) {
								//–ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ –∏ –≤—Å—è —è—á–µ–π–∫–∞ —á—Ç–æ —Ç–æ –∏–º–µ–µ—Ç
								tmp_4sql_value2 = tmp_4sql_value2 + "','" + row_line3.Substring(row_from3, row_length3).Trim();
							} else {
								//–ï—Å–ª–∏ –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ —è—á–µ–π–∫–µ, –Ω–æ —á—Ç–æ —Ç–æ –µ—Å—Ç—å
								tmp_4sql_value2 = tmp_4sql_value2 + "','" + row_line3.Substring(row_from3, (row_line3.Length - row_from3)).Trim();
							}
						} else {
							//–µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É
							tmp_4sql_value2 = tmp_4sql_value2 + "','" + "";
						}
					}
					//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ—á–∫—É. –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ @
					if((row_line3.Length > delimetrs[delimetrs.Count - 1])) {
						if((row_line3.Length >= (delimetrs[delimetrs.Count - 1] + (row_line3.Length - delimetrs[delimetrs.Count - 1])))) {
							//last. –µ—Å–ª–∏ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –º–µ—Å—Ç–µ.
							tmp_4sql_value2 = tmp_4sql_value2 + "','" + row_line3.Substring(delimetrs[delimetrs.Count - 1], (row_line3.Length - delimetrs[delimetrs.Count - 1])).Trim();
						} else {
							//last. –µ—Å–ª–∏ –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
							tmp_4sql_value2 = tmp_4sql_value2 + "','" + row_line3.Substring(delimetrs[delimetrs.Count - 1], (row_line3.Length - delimetrs[delimetrs.Count - 1])).Trim();
						}
					} else {
						//–µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É
						tmp_4sql_value2 = tmp_4sql_value2 + "','" + "";
					}
					tmp_key3 = NameOfDB + "&n4_1&" + Year + "_" + Month;
					if(simpleTables.ContainsKey(tmp_key3)) {
						//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
						Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key3);
					} else {
						//–ó–∞—Å–æ–≤—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä–æ—á–∫—É –¥–ª—è sql
						simpleTables.Add(tmp_key3, tmp_4sql_value2);
					}
				}
			}
			yield return new WaitForEndOfFrame();
		}

		/// <summary>
		/// n4_2
		/// </summary>
		public System.Collections.IEnumerator n4_2(string one_table_data) {
			string row_line4 = "";
			int row_from4 = 0;
			int row_length4 = 0;
			string tmp_4sql_value3 = "";
			string tmp_key4 = "";
			yield return getDelims(one_table_data);
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject12 in rows_unparsed) {
				row_line4 = loopObject12;
				//–Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–∫–∞
				if(row_line4.Contains("–ø—Ä–æ—Ü")) {
					//–¥–µ–Ω—å –º–µ—Å—è—Ü–∞-–ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
					tmp_4sql_value3 = "" + "y20" + Year + "_m" + Month + "','','','";
					//–æ—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ —Ä–∞—Å–ø–∞—Ä—Å–∞ —Å—Ç—Ä–æ–∫–∏
					for(int index6 = 0; index6 < 15; index6 += 1) {
						row_from4 = delimetrs[index6];
						row_length4 = (delimetrs[(index6 + 1)] - row_from4);
						//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ—á–∫—É. –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ @
						if((row_line4.Length > row_from4)) {
							if((row_line4.Length >= (row_from4 + row_length4))) {
								//–ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ –∏ –≤—Å—è —è—á–µ–π–∫–∞ —á—Ç–æ —Ç–æ –∏–º–µ–µ—Ç
								tmp_4sql_value3 = tmp_4sql_value3 + "','" + row_line4.Substring(row_from4, row_length4).Trim();
							} else {
								//–ï—Å–ª–∏ –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ —è—á–µ–π–∫–µ, –Ω–æ —á—Ç–æ —Ç–æ –µ—Å—Ç—å
								tmp_4sql_value3 = tmp_4sql_value3 + "','" + row_line4.Substring(row_from4, (row_line4.Length - row_from4)).Trim();
							}
						} else {
							//–µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É
							tmp_4sql_value3 = tmp_4sql_value3 + "','" + "";
						}
					}
					tmp_key4 = NameOfDB + "&4&" + Year + "_" + Month;
					if(simpleTables.ContainsKey(tmp_key4)) {
						//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
						Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key4);
					} else {
						//–ó–∞—Å–æ–≤—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä–æ—á–∫—É –¥–ª—è sql
						simpleTables.Add(tmp_key4, tmp_4sql_value3);
					}
					break;
				}
			}
			yield return new WaitForEndOfFrame();
		}

		/// <summary>
		/// n4_3
		/// </summary>
		public System.Collections.IEnumerator n4_3(string one_table_data) {
			string row_line5 = "";
			string tmp_key5 = "";
			List<int> tmp_delim = new List<int>() { 7, 13, 19, 25, 32, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 80, 87, 92, 99, 106, 113, 116, 119, 122, 125, 34 };
			List<string> tmp_values = new List<string>();
			yield return getDelims(one_table_data);
			tmp_delim.Sort();
			delimetrs = tmp_delim;
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject13 in rows_unparsed) {
				row_line5 = loopObject13;
				//—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–∫—É —Å —Ü–∏—Ñ—Ä–∞–º–∏
				if(Regex.IsMatch(row_line5, "^ *(\\d+)")) {
					tmp_values = parseRow2List(row_line5);
					//set values for 7 table
					tmp_key5 = NameOfDB + "&" + "7" + "&" + Year + "_" + Month;
					if(simpleTables.ContainsKey(tmp_key5)) {
						//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
						Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key5);
					} else {
						//–ó–∞—Å–æ–≤—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä–æ—á–∫—É –¥–ª—è sql
						simpleTables.Add(tmp_key5, "" + "y20" + Year + "_m" + Month + "','" + string.Join<System.String>("','", tmp_values.GetRange(0, 17)));
					}
					//set values for n5 table
					tmp_key5 = NameOfDB + "&" + "n5" + "&" + Year + "_" + Month;
					if(simpleTables.ContainsKey(tmp_key5)) {
						//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
						Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key5);
					} else {
						//–ó–∞—Å–æ–≤—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä–æ—á–∫—É –¥–ª—è sql
						simpleTables.Add(tmp_key5, "" + "y20" + Year + "_m" + Month + "','" + string.Join<System.String>("','", tmp_values.GetRange(17, 10)));
					}
				}
			}
			yield return new WaitForEndOfFrame();
		}

		/// <summary>
		/// t20_21
		/// </summary>
		public System.Collections.IEnumerator t20_21(string one_table_data) {
			string tmp_topT = "";
			string tmp_bottomT = "";
			string row_line6 = "";
			List<string> tmp_mid = new List<string>();
			List<string> tmp_max = new List<string>();
			List<string> tmp_min = new List<string>();
			List<string> tmp_frz = new List<string>();
			string tmp_key6 = "";
			string tmp_20_line = "";
			string tmp_line_frz = "";
			string tmp_21_line = "";
			tmp_topT = One_table_data.TrimEnd().Substring(0, One_table_data.TrimEnd().IndexOf("–ß –∏ —Å –ª –æ   –¥ –Ω –µ –π   —Å   –º –æ —Ä –æ –∑ –æ –º"));
			tmp_bottomT = One_table_data.TrimEnd().Substring(One_table_data.TrimEnd().IndexOf("–ß –∏ —Å –ª –æ   –¥ –Ω –µ –π   —Å   –º –æ —Ä –æ –∑ –æ –º"));
			yield return getDelims(tmp_topT);
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject14 in rows_unparsed) {
				row_line6 = loopObject14;
				//—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–∫—É —Å —Ü–∏—Ñ—Ä–∞–º–∏
				if(row_line6.Contains("–°—Ä.–º–µ—Å")) {
					tmp_mid = parseRow2List(row_line6);
				} else //—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–∫—É —Å —Ü–∏—Ñ—Ä–∞–º–∏
				if(row_line6.Contains("–ú–∞–∫—Å–∏–º")) {
					tmp_max = parseRow2List(row_line6);
				} else //—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–∫—É —Å —Ü–∏—Ñ—Ä–∞–º–∏
				if(row_line6.Contains("–ú–∏–Ω–∏–º")) {
					tmp_min = parseRow2List(row_line6);
				}
			}
			yield return getDelims(tmp_bottomT);
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject15 in rows_unparsed) {
				row_line6 = loopObject15;
				//—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–∫—É —Å —Ü–∏—Ñ—Ä–∞–º–∏
				if(row_line6.Contains("–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø–æ–∫—Ä–æ–≤–æ–º ")) {
					tmp_frz = parseRow2List(row_line6);
				}
			}
			//—Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è 20 —Ç–∞–±–ª–∏—Ü—ã
			for(int index7 = 1; index7 < 5; index7 += 1) {
				tmp_20_line = tmp_20_line + "','" + tmp_mid[index7] + "','" + tmp_max[index7] + "','" + tmp_min[index7];
			}
			//set values for n20 table
			tmp_key6 = NameOfDB + "&" + "20" + "&" + Year + "_" + Month;
			if(simpleTables.ContainsKey(tmp_key6)) {
				//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
				Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key6);
			} else {
				simpleTables.Add(tmp_key6, "" + "y20" + Year + "_m" + Month + tmp_20_line);
			}
			//—Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è 21 —Ç–∞–±–ª–∏—Ü—ã
			for(int index8 = 9; index8 < 16; index8 += 1) {
				tmp_21_line = tmp_21_line + "','" + tmp_mid[index8] + "','" + tmp_max[index8] + "','" + tmp_min[index8];
			}
			tmp_21_line = tmp_21_line + "','" + new Regex("[^0-9.,'-]*").Replace(string.Join<System.String>("','", tmp_frz), "");
			//set values for n21 table
			tmp_key6 = NameOfDB + "&" + "21" + "&" + Year + "_" + Month;
			if(simpleTables.ContainsKey(tmp_key6)) {
				//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
				Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key6);
			} else {
				simpleTables.Add(tmp_key6, "" + "y20" + Year + "_m" + Month + tmp_21_line);
			}
			yield return new WaitForEndOfFrame();
		}

		/// <summary>
		/// t14
		/// </summary>
		public System.Collections.IEnumerator t14(string one_table_data) {
			string row_line7 = "";
			List<string> tmp_values1 = new List<string>();
			string tmp_key7 = "";
			string tmp_key4DB = "";
			string tmp_4sql_value4 = "";
			yield return getDelims(one_table_data);
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject16 in rows_unparsed) {
				row_line7 = loopObject16;
				//—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–∫—É —Å —Ü–∏—Ñ—Ä–∞–º–∏
				if(Regex.IsMatch(row_line7, "^[–ê-—è ]+\\d")) {
					tmp_values1 = parseRow2List(row_line7);
					tmp_4sql_value4 = tmp_values1[1].Trim() + "','" + tmp_values1[2].Trim() + " " + tmp_values1[3].Trim() + "','" + tmp_values1[4].Trim() + "','" + tmp_values1[5].Trim() + " " + tmp_values1[6].Trim() + "','" + tmp_values1[7].Trim() + "','" + tmp_values1[0].Trim() + "','" + tmp_values1[8].Trim() + "','" + tmp_values1[9].Trim();
					tmp_key4DB = new Regex("[',]*").Replace(tmp_4sql_value4, "");
					//set values for n21 table
					tmp_key7 = NameOfDB + "&" + "14" + "&" + Year + "_" + Month + "_k" + tmp_key4DB;
					if(simpleTables.ContainsKey(tmp_key7)) {
						//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
						Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key7);
					} else {
						simpleTables.Add(tmp_key7, "" + "y20" + Year + "_m" + Month + "_k" + tmp_key4DB + "','" + tmp_4sql_value4);
					}
				}
			}
			yield return new WaitForEndOfFrame();
		}

		/// <summary>
		/// t16
		/// </summary>
		public System.Collections.IEnumerator t16(string one_table_data) {
			string row_line8 = "";
			List<string> tmp_values2 = new List<string>();
			string tmp_key8 = "";
			string tmp_4sql_value5 = "";
			string tmp_key4DB1 = "";
			string tmp_TMName = "";
			int countWithSn = 0;
			string tmp_TMN_key = "";
			yield return getDelims(one_table_data);
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject17 in rows_unparsed) {
				row_line8 = loopObject17;
				//—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–∫—É —Å —Ü–∏—Ñ—Ä–∞–º–∏
				if(Regex.IsMatch(row_line8, "^[–ê-—è ]+\\d")) {
					tmp_values2 = parseRow2List(row_line8);
					tmp_4sql_value5 = new Regex("[ ]*").Replace("','','','','','" + string.Join<System.String>("','", tmp_values2), "");
					tmp_key4DB1 = new Regex("[',]*").Replace(tmp_4sql_value5, "");
					tmp_TMName = NameOfDB + "&" + "16" + "&" + Year + "_" + Month + "_null";
					if(namedTables.ContainsKey(tmp_TMName)) {
						foreach(string loopObject18 in namedTables.Keys) {
							tmp_TMN_key = loopObject18;
							//–°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å–æ —Å–Ω–µ–≥–æ–º
							if(tmp_TMN_key.Contains(NameOfDB + "&" + "n2" + "&" + Year + "_" + Month)) {
								//–°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å–æ —Å–Ω–µ–≥–æ–º
								if(int.TryParse(namedTables[tmp_TMN_key].Split(new char[] { '&' })[1].Split(new char[] { ',' })[6].Trim('''), out int _)) {
									countWithSn = (countWithSn + 1);
								}
							}
						}
						tmp_4sql_value5 = namedTables[tmp_TMName].Split(new char[] { '&' })[1].Replace("'y20" + Year + "_m" + Month + "_null',", "") + ",'" + countWithSn.ToString() + "','" + tmp_4sql_value5.Substring(15);
						namedTables.Remove(tmp_TMName);
					}
					//set values for 7 table
					tmp_key8 = NameOfDB + "&" + "16" + "&" + Year + "_" + Month + "_k" + tmp_key4DB1;
					if(simpleTables.ContainsKey(tmp_key8)) {
						//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
						Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key8);
					} else {
						//–ó–∞—Å–æ–≤—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä–æ—á–∫—É –¥–ª—è sql
						simpleTables.Add(tmp_key8, "" + "y20" + Year + "_m" + Month + "_k" + tmp_key4DB1 + "'," + tmp_4sql_value5);
					}
				}
			}
			yield return new WaitForEndOfFrame();
		}

		/// <summary>
		/// t22
		/// </summary>
		public System.Collections.IEnumerator t22(string one_table_data) {
			string c_row_line = "";
			string c_newTable = "";
			List<string> tmp_newTable = new List<string>();
			List<string> row_parsed = new List<string>();
			int cell_tmp = 0;
			int cell_6th = 0;
			int cell_7th = 0;
			List<List<string>> final_row = new List<List<string>>();
			List<string> last_list_row = new List<string>();
			string tmp_key9 = "";
			string tmp_key4DB2 = "";
			string tmp_4sql_value6 = "";
			yield return getDelims(one_table_data);
			tmp_newTable = new List<string>();
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject19 in rows_unparsed) {
				c_row_line = loopObject19;
				//–Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫. —á–∏—Å—Ç—ã–π
				if(!((((c_row_line.Contains("–ì–û–õ–û–õ–ï–î–ù–û") || string.IsNullOrWhiteSpace(c_row_line)) || Regex.IsMatch(c_row_line, "[‚ïë‚ïü‚ï¶‚ï¢‚îú‚î¨‚î§‚îÇ|I‚ïê=]")) || c_row_line.Contains("–ü–µ—Ä–µ—Ö–æ–¥")))) {
					tmp_newTable.Add(c_row_line);
				}
			}
			final_row = new List<List<string>>();
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject20 in tmp_newTable) {
				row_parsed = parseRow2List(loopObject20);
				if(string.IsNullOrWhiteSpace(row_parsed[0].Trim())) {
					//–ï—Å–ª–∏ —Å—Ç—Ä–æ—á–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—É—Å—Ç–æ—Ç—ã=–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
					if(int.TryParse(row_parsed[6], out cell_tmp)) {
						//6–π —Å—Ç–æ–±–µ—Ü
						if((cell_6th < cell_tmp)) {
							cell_6th = cell_tmp;
							final_row[final_row.Count - 1][6] = cell_6th.ToString();
						}
					} else {
						Debug.Log("6–π —Å—Ç–æ–ª–±–µ–π –Ω–µ –ø–∞—Ä—Å–∞–Ω—É–ª—Å—è! " + row_parsed[6]);
					}
					//–ï—Å–ª–∏ —Å—Ç—Ä–æ—á–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—É—Å—Ç–æ—Ç—ã=–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
					if(int.TryParse(row_parsed[7], out cell_tmp)) {
						//7–π —Å—Ç–æ–ª–±–µ—Ü
						if((cell_7th < cell_tmp)) {
							cell_7th = cell_tmp;
							final_row[final_row.Count - 1][7] = cell_7th.ToString();
						}
					} else {
						Debug.Log("7–π —Å—Ç–æ–ª–±–µ–π –Ω–µ –ø–∞—Ä—Å–∞–Ω—É–ª—Å—è! " + row_parsed[7]);
					}
				} else {
					int.TryParse(row_parsed[6], out cell_6th);
					int.TryParse(row_parsed[7], out cell_7th);
					final_row.Add(row_parsed);
				}
			}
			yield return new WaitForEndOfFrame();
			//—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è/–≤ dict`s
			foreach(List<string> loopObject21 in final_row) {
				last_list_row = loopObject21;
				last_list_row.RemoveAt(0);
				//–ü–æ–¥–Ω–∏–º–∞–µ–º –±—É–∫–≤—ã, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ –¥—Ä—É–≥–æ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö - –æ–Ω–∏ –ø–æ—á–µ–º—É —Ç–æ –ø–æ–¥–Ω—è—Ç—ã.
				last_list_row[0] = last_list_row[0].ToUpper();
				//–º–∞–≥–∏—è.. —É–±–∏—Ä–∞–Ω–∏—è –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
				tmp_4sql_value6 = string.Join("','", Enumerable.Select<System.String, System.String>(last_list_row, (string parameterValues) => {
					return parameterValues.Trim();
				}));
				tmp_key4DB2 = new Regex("[',]*").Replace(tmp_4sql_value6, "");
				//set values for n22 table
				tmp_key9 = NameOfDB + "&" + "22" + "&" + Year + "_" + Month + "_k" + tmp_key4DB2;
				if(simpleTables.ContainsKey(tmp_key9)) {
					//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
					Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key9);
				} else {
					simpleTables.Add(tmp_key9, "" + "y20" + Year + "_m" + Month + "_k" + tmp_key4DB2 + "','" + tmp_4sql_value6);
				}
			}
			yield return new WaitForEndOfFrame();
		}

		/// <summary>
		/// TMN =–¢ –ê –ë –õ –ò –¶ –´    –ú –ï –¢ –ï –û –† –û –õ –û –ì –ò –ß –ï –° –ö –ò –•   –ù –ê –ë –õ –Æ –î –ï –ù –ò –ô 
		/// –î–ª—è —Ç–∞–±–ª–∏—Ü n2 & n3
		/// </summary>
		public System.Collections.IEnumerator TMN_S_n2_n3(string one_table_data) {
			string row_line9 = "";
			List<string> tmp_values3 = new List<string>();
			string tmp_key10 = "";
			string toN2TableValue = "";
			string toN3TableValue = "";
			string day = "";
			yield return getDelims(one_table_data);
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject22 in rows_unparsed) {
				row_line9 = loopObject22;
				//—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–∫—É —Å —Ü–∏—Ñ—Ä–∞–º–∏
				if(Regex.IsMatch(row_line9, "^ *(\\d+)")) {
					tmp_values3 = parseRow2List(row_line9);
					day = tmp_values3[0].Trim();
					toN2TableValue = "'" + string.Join("','", Enumerable.Select<System.String, System.String>(tmp_values3.GetRange(1, 7), (string parameterValues1) => {
						return parameterValues1.Trim();
					})) + "'";
					toN3TableValue = "'" + string.Join("','", Enumerable.Select<System.String, System.String>(tmp_values3.GetRange(8, 9), (string parameterValues2) => {
						return parameterValues2.Trim();
					})) + "'";
					//set values for n2 table
					tmp_key10 = NameOfDB + "&" + "n2" + "&" + Year + "_" + Month + "_" + day;
					if(namedTables.ContainsKey(tmp_key10)) {
						//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
						Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key10);
					} else {
						namedTables.Add(tmp_key10, "'Year_Month_Day'," + "'t_–í–æ–∑–¥_–º–∞–∫—Å','t_–í–æ–∑–¥_–º–∏–Ω','–û—Å–∞–¥–°—É—Ç–∫–∏_–ù–æ—á—å','–û—Å–∞–¥–°—É—Ç–∫–∏_–î–µ–Ω—å','–û—Å–∞–¥–°—É—Ç–∫–∏_–°—É–º–º–∞','–°–Ω–ü–æ–∫—Ä–æ–≤_—Å—Ç.–ø–æ–∫—Ä','–°–Ω–ü–æ–∫—Ä–æ–≤_–≤—ã—Å–æ—Ç–∞_—Å–º'" + "&" + "'" + "y20" + Year + "_m" + Month + "_d" + day + "'," + toN2TableValue);
					}
					//set values for n3 table
					tmp_key10 = NameOfDB + "&" + "n3" + "&" + Year + "_" + Month + "_" + day;
					if(namedTables.ContainsKey(tmp_key10)) {
						//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
						Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key10);
					} else {
						namedTables.Add(tmp_key10, "'Year_Month_Day'," + "'–¥–∂','—Å','—Å–º','—Ç—Ç','–∏–∑–º','–≥–ª','–º–º','–≥–¥','–≥'".ToUpper() + "&" + "'" + "y20" + Year + "_m" + Month + "_d" + day + "'," + toN3TableValue);
					}
				}
			}
			yield return new WaitForEndOfFrame();
		}

		/// <summary>
		/// TMN =–¢ –ê –ë –õ –ò –¶ –´    –ú –ï –¢ –ï –û –† –û –õ –û –ì –ò –ß –ï –° –ö –ò –•   –ù –ê –ë –õ –Æ –î –ï –ù –ò –ô 
		/// –î–ª—è —Ç–∞–±–ª–∏—Ü t1 & t16
		/// </summary>
		public System.Collections.IEnumerator TMN_S_t1_t16(string one_table_data) {
			string row_line10 = "";
			List<string> tmp_values4 = new List<string>();
			string tmp_key11 = "";
			string toT1TableValue = "";
			string toT16TableValue = "";
			yield return getDelims(one_table_data);
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject23 in rows_unparsed) {
				row_line10 = loopObject23;
				if(!((row_line10.IndexOfAny(new char[] { '=', '‚ïê' }) > -1))) {
					tmp_values4 = parseRow2List(row_line10);
					//—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–∫—É —Å —Ü–∏—Ñ—Ä–∞–º–∏
					if(Regex.IsMatch(row_line10, "^ *(\\d+)")) {
						switch(int.Parse(tmp_values4[0])) {
							case 1: {
								toT16TableValue = "'–ò–∑–º–µ–Ω–∏—Ç—å–í—Ä—É—á–Ω—É—é–¢–∏–ø','" + tmp_values4[7].Trim() + "','";
							}
							break;
							case 2: {
								toT16TableValue = toT16TableValue + tmp_values4[7].Trim() + "','";
							}
							break;
							case 3: {
								toT16TableValue = toT16TableValue + tmp_values4[7].Trim() + "'";
							}
							break;
						}
					} else {
						//—Å—Ç—Ä–æ—á–∫–∞ —Å –º–µ—Å—è—Ü–µ–º - –¥–ª—è –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
						if(row_line10.Contains("–ú–µ—Å")) {
							toT1TableValue = "'" + string.Join("','", Enumerable.Select<System.String, System.String>(tmp_values4.GetRange(1, 6), (string parameterValues3) => {
								return parameterValues3.Trim();
							})) + "'";
							//4t1
							//set values for t1 table
							tmp_key11 = NameOfDB + "&" + "1" + "&" + Year + "_" + Month;
							if(namedTables.ContainsKey(tmp_key11)) {
								//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
								Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key11);
							} else {
								namedTables.Add(tmp_key11, "'N_year_N_month'," + "'tV_mid_max','tV_mid_min','tV_abs_max','tV_abs_max_day','tV_abs_min','tV_abs_min_day'" + "&" + "'" + "y20" + Year + "_m" + Month + "'," + toT1TableValue);
							}
						}
					}
				}
			}
			if((toT16TableValue.Length > 0)) {
				//set values for t16 table
				tmp_key11 = NameOfDB + "&" + "16" + "&" + Year + "_" + Month + "_null";
				if(namedTables.ContainsKey(tmp_key11)) {
					//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
					Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key11);
				} else {
					namedTables.Add(tmp_key11, "'N_year_N_month_N_day_trace'," + "'e_type','e_1dec','e_2dec','e_3dec'".ToUpper() + "&" + "'" + "y20" + Year + "_m" + Month + "_null" + "'," + toT16TableValue);
				}
			}
			yield return new WaitForEndOfFrame();
		}

		/// <summary>
		/// TMN =–¢ –ê –ë –õ –ò –¶ –´    –ú –ï –¢ –ï –û –† –û –õ –û –ì –ò –ß –ï –° –ö –ò –•   –ù –ê –ë –õ –Æ –î –ï –ù –ò –ô 
		/// t7=–ø–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞
		/// </summary>
		public System.Collections.IEnumerator TMN_S_t7_1(string one_table_data) {
			string row_line11 = "";
			List<string> tmp_values5 = new List<string>();
			string tmp_key12 = "";
			string toT7TableValue = "";
			yield return getDelims(one_table_data);
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject24 in rows_unparsed) {
				row_line11 = loopObject24;
				//–∏–≥–Ω–æ—Ä–∏–º —à–∞–ø–∫—É
				if(!((row_line11.IndexOfAny(new char[] { '|', '–Ω' }) > -1))) {
					//—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–∫—É —Å —Ü–∏—Ñ—Ä–∞–º–∏
					if(Regex.IsMatch(row_line11, "^ *(\\d+)")) {
						tmp_values5 = parseRow2List(row_line11);
						//–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—Ä–∞–≤–∫—É –Ω–∞ —Å–º–∞—á–∏–≤–∞–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å–∏–ª—å–Ω–æ –≤—ã—à–µ
						toT7TableValue = "'" + string.Join("','", Enumerable.Select<System.String, System.String>(tmp_values5.GetRange(3, 5), (string parameterValues4) => {
							return parameterValues4.Trim();
						})) + "','" + wet_cor_m + "'";
						//set values for t7_1 table
						tmp_key12 = NameOfDB + "&" + "7" + "&" + Year + "_" + Month;
						if(namedTables.ContainsKey(tmp_key12)) {
							//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
							Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key12);
						} else {
							//–∑–∞—Å–æ–≤—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤. –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏-—Ç–∞–±–ª–∏—Ü–µ
							namedTables.Add(tmp_key12, "'N_year_N_month'," + "'rnfl_nightTime','rnfl_dayTime','rnfl_summ','rnfl_maxByDay','rnfl_day','tt_wet_corr','RD_00','RD_01','RD_05','RD_1','RD_5','RD_10','RD_20','RD_30','RD_50','RD_80','RD_120'" + "&" + "'" + "y20" + Year + "_m" + Month + "'," + toT7TableValue);
						}
					}
				}
			}
			yield return new WaitForEndOfFrame();
		}

		/// <summary>
		/// TMN =–¢ –ê –ë –õ –ò –¶ –´    –ú –ï –¢ –ï –û –† –û –õ –û –ì –ò –ß –ï –° –ö –ò –•   –ù –ê –ë –õ –Æ –î –ï –ù –ò –ô 
		/// t7=–≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞
		/// </summary>
		public System.Collections.IEnumerator TMN_S_t7_2(string one_table_data) {
			string row_line12 = "";
			List<string> tmp_values6 = new List<string>();
			string tmp_key13 = "";
			string toT7TableValue1 = "";
			yield return getDelims(one_table_data);
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject25 in rows_unparsed) {
				row_line12 = loopObject25;
				//–∏–≥–Ω–æ—Ä–∏–º —à–∞–ø–∫—É
				if(!((row_line12.IndexOfAny(new char[] { '|', '–Ω' }) > -1))) {
					//—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–∫—É —Å —Ü–∏—Ñ—Ä–∞–º–∏
					if(Regex.IsMatch(row_line12, "^ *(\\d+)")) {
						tmp_values6 = parseRow2List(row_line12);
						toT7TableValue1 = "'" + string.Join("','", Enumerable.Select<System.String, System.String>(tmp_values6, (string parameterValues5) => {
							return parameterValues5.Trim();
						})) + "'";
						//set values for t7_2 table
						tmp_key13 = NameOfDB + "&" + "7" + "&" + Year + "_" + Month;
						if(namedTables.ContainsKey(tmp_key13)) {
							namedTables[tmp_key13] = namedTables[tmp_key13] + "," + toT7TableValue1;
						} else {
							//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
							Debug.Log("–ü–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã 7–π —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç—É! –û_–æ" + tmp_key13);
						}
					}
				}
			}
			yield return new WaitForEndOfFrame();
		}

		/// <summary>
		/// TMN =–¢ –ê –ë –õ –ò –¶ –´    –ú –ï –¢ –ï –û –† –û –õ –û –ì –ò –ß –ï –° –ö –ò –•   –ù –ê –ë –õ –Æ –î –ï –ù –ò –ô 
		/// –î–ª—è —Ç–∞–±–ª–∏—Ü—ã11
		/// –ê–¢–ú–û–°–§–ï–†–ù–´–ï  –Ø–í–õ–ï–ù–ò–Ø,  –ß–ò–°–õ–û  –î–ù–ï–ô 
		/// </summary>
		public System.Collections.IEnumerator TMN_S_t11(string one_table_data) {
			string row_line13 = "";
			List<string> tmp_values7 = new List<string>();
			string tmp_key14 = "";
			string toT11TableValue = "";
			yield return getDelims(one_table_data);
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject26 in rows_unparsed) {
				row_line13 = loopObject26;
				//–∏–≥–Ω–æ—Ä–∏–º —à–∞–ø–∫—É
				if(!((row_line13.IndexOfAny(new char[] { '|', '–¥', '=', '-' }) > -1))) {
					//—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–∫—É —Å —Ü–∏—Ñ—Ä–∞–º–∏
					if(Regex.IsMatch(row_line13, "^ *(\\d+)")) {
						tmp_values7 = parseRow2List(row_line13);
						toT11TableValue = "'" + string.Join("','", Enumerable.Select<System.String, System.String>(tmp_values7.GetRange(0, 9), (string parameterValues6) => {
							return parameterValues6.Trim();
						})) + "'";
						//set values for t11 table
						tmp_key14 = NameOfDB + "&" + "11" + "&" + Year + "_" + Month;
						if(namedTables.ContainsKey(tmp_key14)) {
							//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
							Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key14);
						} else {
							//–∑–∞—Å–æ–≤—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤. –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏-—Ç–∞–±–ª–∏—Ü–µ
							namedTables.Add(tmp_key14, "'Year_Month_Day'," + "'–î–ñ','–°','–°–ú','–¢–¢','–ò–ó–ú','–ì–õ','–ú–ú','–ì–î','–ì'" + "&" + "'" + "y20" + Year + "_m" + Month + "'," + toT11TableValue);
						}
					}
				}
			}
			yield return new WaitForEndOfFrame();
		}

		/// <summary>
		/// TMN =–¢ –ê –ë –õ –ò –¶ –´    –ú –ï –¢ –ï –û –† –û –õ –û –ì –ò –ß –ï –° –ö –ò –•   –ù –ê –ë –õ –Æ –î –ï –ù –ò –ô 
		/// –î–ª—è —Ç–∞–±–ª–∏—Ü—ã n2
		/// 1 –° –£ –¢ –û –ß –ù –´ –ï   –î –ê –ù –ù –´ –ï, –û—Å–∞–¥–∫–∏, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
		/// </summary>
		public System.Collections.IEnumerator TMN_L_n2_1(string one_table_data) {
			string row_line14 = "";
			List<string> tmp_values8 = new List<string>();
			string tmp_key15 = "";
			string toN2TableValue1 = "";
			string day1 = "";
			yield return getDelims(one_table_data);
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject27 in rows_unparsed) {
				row_line14 = loopObject27;
				//—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–∫—É —Å —Ü–∏—Ñ—Ä–∞–º–∏
				if(Regex.IsMatch(row_line14, "^ *(\\d+)")) {
					tmp_values8 = parseRow2List(row_line14);
					day1 = tmp_values8[1].Trim();
					//–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞
					toN2TableValue1 = "'" + string.Join("','", Enumerable.Select<System.String, System.String>(tmp_values8.GetRange(5, 2), (string parameterValues7) => {
						return parameterValues7.Trim();
					})) + "'";
					//–û—Å–∞–¥–∫–∏
					toN2TableValue1 = toN2TableValue1 + ",'" + string.Join("','", Enumerable.Select<System.String, System.String>(tmp_values8.GetRange(2, 3), (string parameterValues8) => {
						return parameterValues8.Trim();
					})) + "'";
					//set values for n2 table
					tmp_key15 = NameOfDB + "&" + "n2" + "&" + Year + "_" + Month + "_" + day1;
					if(namedTables.ContainsKey(tmp_key15)) {
						//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
						Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key15);
					} else {
						//–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ —Å–Ω–µ–≥–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
						namedTables.Add(tmp_key15, "'Year_Month_Day'," + "'t_–í–æ–∑–¥_–º–∞–∫—Å','t_–í–æ–∑–¥_–º–∏–Ω','–û—Å–∞–¥–°—É—Ç–∫–∏_–ù–æ—á—å','–û—Å–∞–¥–°—É—Ç–∫–∏_–î–µ–Ω—å','–û—Å–∞–¥–°—É—Ç–∫–∏_–°—É–º–º–∞','–°–Ω–ü–æ–∫—Ä–æ–≤_—Å—Ç.–ø–æ–∫—Ä','–°–Ω–ü–æ–∫—Ä–æ–≤_–≤—ã—Å–æ—Ç–∞_—Å–º'" + "&" + "'" + "y20" + Year + "_m" + Month + "_d" + day1 + "'," + toN2TableValue1);
					}
				}
			}
			yield return new WaitForEndOfFrame();
		}

		/// <summary>
		/// TMN =–¢ –ê –ë –õ –ò –¶ –´    –ú –ï –¢ –ï –û –† –û –õ –û –ì –ò –ß –ï –° –ö –ò –•   –ù –ê –ë –õ –Æ –î –ï –ù –ò –ô 
		/// n2=–≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞, —Å–Ω–µ–≥
		/// n3=–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
		/// </summary>
		public System.Collections.IEnumerator TMN_L_n2_2_n3(string one_table_data) {
			string row_line15 = "";
			List<string> tmp_values9 = new List<string>();
			string day2 = "";
			string tmp_key16 = "";
			string toN2TableValue2 = "";
			string toN3TableValue1 = "";
			yield return getDelims(one_table_data);
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject28 in rows_unparsed) {
				row_line15 = loopObject28;
				//—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–∫—É —Å —Ü–∏—Ñ—Ä–∞–º–∏
				if(Regex.IsMatch(row_line15, "^ *(\\d+)")) {
					tmp_values9 = parseRow2List(row_line15);
					day2 = tmp_values9[1].Trim();
					//—Å–Ω–µ–≥
					toN2TableValue2 = "'" + string.Join("','", Enumerable.Select<System.String, System.String>(tmp_values9.GetRange(2, 2), (string parameterValues9) => {
						return parameterValues9.Trim();
					})) + "'";
					toN3TableValue1 = "'" + string.Join("','", Enumerable.Select<System.String, System.String>(tmp_values9.GetRange(4, 15), (string parameterValues10) => {
						return parameterValues10.Trim();
					})) + "'";
					//set values for n2_2 table
					tmp_key16 = NameOfDB + "&" + "n2" + "&" + Year + "_" + Month + "_" + day2;
					if(namedTables.ContainsKey(tmp_key16)) {
						namedTables[tmp_key16] = namedTables[tmp_key16] + "," + toN2TableValue2;
					} else {
						//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
						Debug.Log("–ü–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã n2–π —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç—É! –û_–æ" + tmp_key16);
					}
					//set values for n3 table
					tmp_key16 = NameOfDB + "&" + "n3" + "&" + Year + "_" + Month + "_" + day2;
					if(namedTables.ContainsKey(tmp_key16)) {
						//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
						Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key16);
					} else {
						namedTables.Add(tmp_key16, "'Year_Month_Day'," + "'–î–ñ','–°','–°–ú','–¢–¢','–ò–ó–ú','–ì–õ','–ú–ú','–ì–î','–ì','–î–ú','–ü–ú','–ü–ë','–ú–ì','–°–ß','–®'".ToUpper() + "&" + "'" + "y20" + Year + "_m" + Month + "_d" + day2 + "'," + toN3TableValue1);
					}
				}
			}
			yield return new WaitForEndOfFrame();
		}

		/// <summary>
		/// TMN =–¢ –ê –ë –õ –ò –¶ –´    –ú –ï –¢ –ï –û –† –û –õ –û –ì –ò –ß –ï –° –ö –ò –•   –ù –ê –ë –õ –Æ –î –ï –ù –ò –ô 
		/// t1=—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–∞ –º–µ—Å—è—Ü
		/// t7=–æ—Å–∞–¥–∫–∏ –∑–∞ –º–µ—Å—è—Ü
		/// t16=—Å–Ω–µ–≥-–¥–µ–∫–∞–¥—ã –∏ —á–∏—Å–ª–æ –¥–Ω–µ–π —Å –Ω–∏–º
		/// </summary>
		public System.Collections.IEnumerator TMN_L_t1_t7_1_t16(string one_table_data) {
			string row_line16 = "";
			List<string> tmp_values10 = new List<string>();
			string tmp_key17 = "";
			string toT1TableValue1 = "";
			string toT16TableValue1 = "";
			string toT7TableValue0 = "";
			yield return getDelims(one_table_data);
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject29 in rows_unparsed) {
				row_line16 = loopObject29;
				if(!((row_line16.IndexOfAny(new char[] { '=', '‚ïê', '|' }) > -1))) {
					tmp_values10 = parseRow2List(row_line16);
					//—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–∫—É —Å —Ü–∏—Ñ—Ä–∞–º–∏
					if(Regex.IsMatch(row_line16, "^ *(\\d+)")) {
						//–¥–µ–∫–∞–¥—ã
						switch(tmp_values10[0].Trim()) {
							case "1-—è": {
								toT16TableValue1 = "'–ò–∑–º–µ–Ω–∏—Ç—å–í—Ä—É—á–Ω—É—é–¢–∏–ø','" + tmp_values10[14].Trim() + "','";
							}
							break;
							case "2-—è": {
								toT16TableValue1 = toT16TableValue1 + tmp_values10[14].Trim() + "','";
							}
							break;
							case "3-—è": {
								toT16TableValue1 = toT16TableValue1 + tmp_values10[14].Trim() + "'";
							}
							break;
						}
					} else {
						//—Å—Ç—Ä–æ—á–∫–∞ —Å –º–µ—Å—è—Ü–µ–º - –¥–ª—è –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
						if(row_line16.Contains("–ú–µ—Å")) {
							//—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–∞ –º–µ—Å—è—Ü
							toT1TableValue1 = "'" + string.Join("','", Enumerable.Select<System.String, System.String>(tmp_values10.GetRange(2, 6), (string parameterValues11) => {
								return parameterValues11.Trim();
							})) + "'";
							//–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—Ä–∞–≤–∫—É –Ω–∞ —Å–º–∞—á–∏–≤–∞–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å–∏–ª—å–Ω–æ –≤—ã—à–µ
							toT7TableValue0 = "'" + string.Join("','", Enumerable.Select<System.String, System.String>(tmp_values10.GetRange(8, 5), (string parameterValues12) => {
								return parameterValues12.Trim();
							})) + "','" + wet_cor_m + "'";
							//set values for t1 table
							tmp_key17 = NameOfDB + "&" + "1" + "&" + Year + "_" + Month;
							if(namedTables.ContainsKey(tmp_key17)) {
								//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
								Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key17);
							} else {
								namedTables.Add(tmp_key17, "'N_year_N_month'," + "'tV_mid_max','tV_mid_min','tV_abs_max','tV_abs_max_day','tV_abs_min','tV_abs_min_day'" + "&" + "'" + "y20" + Year + "_m" + Month + "'," + toT1TableValue1);
							}
							//set values for t7 table
							tmp_key17 = NameOfDB + "&" + "7" + "&" + Year + "_" + Month;
							if(namedTables.ContainsKey(tmp_key17)) {
								//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
								Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key17);
							} else {
								//–∑–∞—Å–æ–≤—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤. –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏-—Ç–∞–±–ª–∏—Ü–µ
								namedTables.Add(tmp_key17, "'N_year_N_month'," + "'rnfl_nightTime','rnfl_dayTime','rnfl_summ','rnfl_maxByDay','rnfl_day','tt_wet_corr','RD_00','RD_01','RD_05','RD_1','RD_5','RD_10','RD_20','RD_30','RD_50','RD_80','RD_120'" + "&" + "'" + "y20" + Year + "_m" + Month + "'," + toT7TableValue0);
							}
						}
					}
				}
			}
			if((toT16TableValue1.Length > 0)) {
				//4t16
				//set values for t16 table
				tmp_key17 = NameOfDB + "&" + "16" + "&" + Year + "_" + Month + "_null";
				if(namedTables.ContainsKey(tmp_key17)) {
					//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
					Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key17);
				} else {
					namedTables.Add(tmp_key17, "'N_year_N_month_N_day_trace'," + "'e_type','e_1dec','e_2dec','e_3dec'".ToUpper() + "&" + "'" + "y20" + Year + "_m" + Month + "_null" + "'," + toT16TableValue1);
				}
			}
			yield return new WaitForEndOfFrame();
		}

		/// <summary>
		/// TMN =–¢ –ê –ë –õ –ò –¶ –´    –ú –ï –¢ –ï –û –† –û –õ –û –ì –ò –ß –ï –° –ö –ò –•   –ù –ê –ë –õ –Æ –î –ï –ù –ò –ô 
		/// t7=–≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞
		/// t11=—á–∏—Å–ª–æ –¥–Ω–µ–π —Å –ê–Ø
		/// </summary>
		public System.Collections.IEnumerator TMN_L_t7_2_t11(string one_table_data) {
			string row_line17 = "";
			List<string> tmp_values11 = new List<string>();
			string tmp_key18 = "";
			string toT7TableValue2 = "";
			string toT11TableValue1 = "";
			yield return getDelims(one_table_data);
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject30 in rows_unparsed) {
				row_line17 = loopObject30;
				//–∏–≥–Ω–æ—Ä–∏–º —à–∞–ø–∫—É
				if(!((row_line17.IndexOfAny(new char[] { '|', '–Ω' }) > -1))) {
					//—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–∫—É —Å —Ü–∏—Ñ—Ä–∞–º–∏
					if(Regex.IsMatch(row_line17, "^ *(\\d+)")) {
						tmp_values11 = parseRow2List(row_line17);
						//–ß–ò–°–õ–û –î–ù–ï–ô –° –û–°–ê–î–ö–ê–ú–ò –ü–û –ì–†–ê–î–ê–¶–ò–Ø–ú, –ù–ï –ú–ï–ù–ï–ï (–ú–ú
						toT7TableValue2 = "'" + string.Join("','", Enumerable.Select<System.String, System.String>(tmp_values11.GetRange(1, 11), (string parameterValues13) => {
							return parameterValues13.Trim();
						})) + "'";
						//–ß–ò–°–õ–û –î–ù–ï–ô –° –ê–¢–ú–û–°–§–ï–†–ù–´–ú–ò –Ø–í–õ–ï–ù–ò–Ø–ú–ò
						toT11TableValue1 = "'" + string.Join("','", Enumerable.Select<System.String, System.String>(tmp_values11.GetRange(12, 15), (string parameterValues14) => {
							return parameterValues14.Trim();
						})) + "'";
						//set values for t7_2 table
						tmp_key18 = NameOfDB + "&" + "7" + "&" + Year + "_" + Month;
						if(namedTables.ContainsKey(tmp_key18)) {
							namedTables[tmp_key18] = namedTables[tmp_key18] + "," + toT7TableValue2;
						} else {
							//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
							Debug.Log("–ü–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã 7–π —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç—É! –û_–æ" + tmp_key18);
						}
						//set values for t11 table
						tmp_key18 = NameOfDB + "&" + "11" + "&" + Year + "_" + Month;
						if(namedTables.ContainsKey(tmp_key18)) {
							//–ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ—Ç–∫–Ω—É—Ç—å —Å—é–¥–∞ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
							Debug.Log("–ö–ª—é—á —É–∂–µ –µ—Å—Ç—å:" + tmp_key18);
						} else {
							//–∑–∞—Å–æ–≤—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤. –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏-—Ç–∞–±–ª–∏—Ü–µ
							namedTables.Add(tmp_key18, "'Year_Month_Day'," + "'–î–ñ','–°','–°–ú','–¢–¢','–ò–ó','–ì–õ','–ú–ú','–ì–î','–ì','–î–ú','–ü–ú','–ü–ë','–ú–ì','–°–ß','–®'" + "&" + "'" + "y20" + Year + "_m" + Month + "'," + toT11TableValue1);
						}
					}
				}
			}
			yield return new WaitForEndOfFrame();
		}

		/// <summary>
		/// parseRow2List
		/// </summary>
		public List<string> parseRow2List(string row) {
			string row_line18 = "";
			int row_from5 = 0;
			int row_length5 = 0;
			List<string> list2retrn = new List<string>();
			Regex regex_clearCell = default(Regex);
			regex_clearCell = new Regex("[‚ïë‚ïü‚ï¶‚ï¢‚îú‚î¨‚î§‚îÇ|I‚ïê=]*");
			row_line18 = row;
			list2retrn.Add(regex_clearCell.Replace(row_line18.Substring(0, delimetrs[0]), ""));
			//–æ—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ —Ä–∞—Å–ø–∞—Ä—Å–∞ —Å—Ç—Ä–æ–∫–∏
			for(int index9 = 0; index9 < (delimetrs.Count - 1); index9 += 1) {
				row_from5 = delimetrs[index9];
				row_length5 = (delimetrs[(index9 + 1)] - row_from5);
				//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ—á–∫—É. –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ @
				if((row_line18.Length > row_from5)) {
					if((row_line18.Length >= (row_from5 + row_length5))) {
						list2retrn.Add(regex_clearCell.Replace(row_line18.Substring(row_from5, row_length5), ""));
					} else {
						list2retrn.Add(regex_clearCell.Replace(row_line18.Substring(row_from5, (row_line18.Length - row_from5)), ""));
					}
				} else {
					list2retrn.Add("");
				}
			}
			//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ—á–∫—É. –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ @
			if((row_line18.Length > delimetrs[delimetrs.Count - 1])) {
				if((row_line18.Length >= (delimetrs[delimetrs.Count - 1] + (row_line18.Length - delimetrs[delimetrs.Count - 1])))) {
					list2retrn.Add(regex_clearCell.Replace(row_line18.Substring(delimetrs[delimetrs.Count - 1], (row_line18.Length - delimetrs[delimetrs.Count - 1])), ""));
				} else {
					list2retrn.Add(regex_clearCell.Replace(row_line18.Substring(delimetrs[delimetrs.Count - 1], (row_line18.Length - delimetrs[delimetrs.Count - 1])), ""));
				}
			} else {
				list2retrn.Add("");
			}
			return list2retrn;
		}
	}
}
