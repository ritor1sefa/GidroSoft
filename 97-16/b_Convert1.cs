#pragma warning disable
using UnityEngine;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using Mono.Data.Sqlite;
using System.Data;
using System.Linq;
using TMPro;

namespace MaxyGames.Generated {
	public class b_Convert1 : MaxyGames.RuntimeBehaviour {
		public Dictionary<string, SqliteConnection> sql_Connections = new Dictionary<string, SqliteConnection>();
		public Dictionary<string, SqliteCommand> sql_cmnds = new Dictionary<string, SqliteCommand>();
		public Dictionary<string, SqliteDataReader> sql_readers = new Dictionary<string, SqliteDataReader>();
		public string[] Files = new string[0];
		public int currentFile = 0;
		public int currentTable = 0;
		public Dictionary<string, string> bd_names = new Dictionary<string, string>();
		public List<string> sql_db_names = new List<string>();
		public string tmp_db_name = "";
		public string tmp_line = "";
		public string tmp_name = "";
		private List<int> delimetrs = new List<int>();
		public string post_name = "";
		public string db_name = "";
		public string N_year_N_month_FromHeader = "";
		public Dictionary<string, string> months = new Dictionary<string, string>() { { "–Ø–ù–í–ê–†–¨", "1" }, { "–§–ï–í–†–ê–õ–¨", "2" }, { "–ú–ê–†–¢", "3" }, { "–ê–ü–†–ï–õ–¨", "4" }, { "–ú–ê–ô", "5" }, { "–ò–Æ–ù–¨", "6" }, { "–ò–Æ–õ–¨", "7" }, { "–ê–í–ì–£–°–¢", "8" }, { "–°–ï–ù–¢–Ø–ë–†–¨", "9" }, { "–û–ö–¢–Ø–ë–†–¨", "10" }, { "–ù–û–Ø–ë–†–¨", "11" }, { "–î–ï–ö–ê–ë–†–¨", "12" } };
		public string N_year_N_month = "";
		public GameObject objectVariable;
		public GameObject objectVariable1;
		public GameObject objectVariable2;
		private string loopObject2;
		private int index;
		private int index1;
		public GameObject objectVariable3;
		private int index4;
		private int index5;

		/// <summary>
		/// sqlite –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä–∫—É —Å—Ç–æ–ª–±—Ü–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–æ–¥—É+–º–µ—Å—è—Ü—É
		/// SELECT * FROM "2"  Where "2th" LIKE "%2001" AND "2th" LIKE "02%";
		/// SELECT * FROM "2"  Where "2th" LIKE "%y2001%" AND "2th" LIKE "%m02%";
		/// </summary>
		private void Update() {
			string variable0 = "";
			if(Input.GetKeyUp(KeyCode.UpArrow)) {}
		}

		public System.Collections.IEnumerator loadFromFiles() {
			string path = "tmp.txt";
			string file_data = "";
			string One_table_data = "";
			string N_table = "";
			List<string> _rowUnparsed = new List<string>();
			List<string> table = new List<string>();
			List<List<string>> Qtable = new List<List<string>>();
			string tmp_tblName = "";
			foreach(string loopObject in Files) {
				path = loopObject;
				file_data = new Regex("^(.*.*).+$", RegexOptions.Multiline).Replace(File.ReadAllText(path), "");
				File.Delete(path);
				table = Enumerable.ToList<System.String>(file_data.Trim().Split("–¢–∞–±–ª–∏", System.StringSplitOptions.RemoveEmptyEntries));
				objectVariable.gameObject.GetComponent<TMPro.TMP_Text>().text = path;
				currentFile = (currentFile + 1);
				objectVariable1.gameObject.GetComponent<TMPro.TMP_Text>().text = currentFile.ToString();
				foreach(string loopObject1 in table) {
					yield return new WaitForEndOfFrame();
					One_table_data = loopObject1;
					//–ü—Ä–æ–ø—É—Å–∫–∞–µ–º "—Ç–∞–±–ª–∏—Ü—ã" –≥–¥–µ –º–Ω–æ–≥–æ —Ç–æ—á–µ–∫ = –º–µ–Ω—é –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
					if((!(One_table_data.Contains(".....")) && One_table_data.StartsWith("—Ü–∞"))) {
						//Get Number of table
						N_table = Regex.Match(One_table_data, "—Ü–∞\\D*(\\w+)", RegexOptions.None).Result("$1");
						switch(N_table) {
							case "11": {
								//Get subNumber of table N11&N21
								N_table = Regex.Match(One_table_data, "—Ü–∞\\D*(\\d+)\\..*(\\d+)\\).*\\n", RegexOptions.None).Result("$1_$2");
							}
							break;
							case "21": {
								//Get subNumber of table N11&N21
								N_table = Regex.Match(One_table_data, "—Ü–∞\\D*(\\d+)\\..*(\\d+)\\).*\\n", RegexOptions.None).Result("$1_$2");
							}
							break;
						}
						//–ü—Ä–æ–ø—É—Å–∫–∞–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
						switch(N_table) {
							case "3": {
							}
							break;
							case "5": {
							}
							break;
							case "9": {
							}
							break;
							case "10": {
							}
							break;
							case "18": {
							}
							break;
							case "19": {
							}
							break;
							case "": {
							}
							break;
							case "4a": {
							}
							break;
							case "7a": {
							}
							break;
							case "": {
							}
							break;
							case "11": {
							}
							break;
							case "23": {
							}
							break;
							default: {
								objectVariable2.gameObject.GetComponent<TMPro.TMP_Text>().text = currentTable.ToString();
								_rowUnparsed = splitTable(One_table_data, N_table);
								yield return new WaitForEndOfFrame();
								delimetrs = _alllndexOfDelimeters(_rowUnparsed, N_table);
								yield return new WaitForEndOfFrame();
								N_year_N_month_FromHeader = Regex.Match(One_table_data, "–ú–µ—Å—è—Ü\\D*(\\d+)\\D*–ì–æ–¥\\D*(\\d+)", RegexOptions.None).Result("y$2_m$1");
								if(!(N_table.Equals(tmp_tblName))) {
									N_year_N_month = "";
									tmp_tblName = N_table;
								}
								//22 —Ç–∞–±–ª–∏—Ü–∞
								if(N_table.Contains("22")) {
									yield return parseRow22t(delimetrs, _rowUnparsed, N_table, N_year_N_month_FromHeader, "");
								} else {
									//–ø–æ–ª—É—á–∞—Ç–µ–ª—å –º–µ—Å—è—Ü–∞-–≥–æ–¥–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ 2016+
									foreach(string tempVar in _rowUnparsed) {
										loopObject2 = tempVar;
										if(Regex.IsMatch(loopObject2, "^\\s*(\\S+) *(\\d{4})")) {
											N_year_N_month = "y" + Regex.Match(loopObject2, "^\\s*(\\S+) *(\\d{4})", RegexOptions.None).Result("$2") + "_m" + months[Regex.Match(loopObject2, "^\\s*(\\S+) *(\\d{4})", RegexOptions.None).Result("$1")];
										} else {
											if(string.IsNullOrWhiteSpace(N_year_N_month)) {
												N_year_N_month = N_year_N_month_FromHeader;
											}
											Qtable = parseRow(delimetrs, new List<string>(), N_table, N_year_N_month, loopObject2);
											yield return sql_insertTables(Qtable, N_table, N_year_N_month);
										}
									}
									yield return new WaitForEndOfFrame();
								}
							}
							break;
						}
					}
					currentTable = (currentTable + 1);
				}
				Debug.Log("–°–ª–µ–¥ —Ñ–∞–π–ª");
				sql_close();
				currentTable = 0;
				yield return new WaitForEndOfFrame();
			}
			currentFile = 0;
			Debug.Log("End");
		}

		/// <summary>
		/// –ü–∏–ª–∏–º —Ç–∞–±–ª–∏—Ü—ã, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
		/// </summary>
		public List<string> splitTable(string One_table_data, string N_table) {
			List<string> _rowsUnparsed = new List<string>();
			List<string> _2thPart = default(List<string>);
			string tmp_row_raw = "";
			string tmp_ifNextMonth = "";
			int tmp_row_maxLenght = 0;
			int tmp_row_hulfLenght = 0;
			int year = 0;
			_rowsUnparsed.Clear();
			_rowsUnparsed = new List<string>();
			_2thPart = new List<string>();
			tmp_row_raw = "";
			tmp_row_maxLenght = 0;
			switch(N_table) {
				case "12": {
					//–ï—Å–ª–∏ —à–∞–ø–∫–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏, —Ç–æ 2 —Å—Ç–æ–ª–±—Ü–∞
					if(Regex.IsMatch(One_table_data, "(‚ïê|=) ")) {
						//–ø–∏–ª–∏–º 12 —Ç–∞–±–ª–∏—Ü—É –ø–æ–ø–æ–ª–∞–º
						foreach(string loopObject3 in One_table_data.Split(System.Environment.NewLine, System.StringSplitOptions.None)) {
							if(!(Regex.IsMatch(loopObject3.Trim(), "^—Ü–∞\\D*(\\d+)\\."))) {
								tmp_row_raw = loopObject3;
								if((tmp_row_raw.Length > tmp_row_maxLenght)) {
									//–¢—É—Ç –≤—Å–µ–≥–¥–∞ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ (–∏–∑ —à–∞–ø–∫–∏)
									tmp_row_maxLenght = tmp_row_raw.Length;
								}
								//–ü–æ–∏—Å–∫ —Å—Ç–∞—Ä—Ç–∞ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã
								if((Regex.IsMatch(tmp_row_raw, "(‚ïê|=) ") && Regex.IsMatch(tmp_row_raw, "(\\S+\\s+)\\S+"))) {
									tmp_row_hulfLenght = new Regex("(\\S+\\s+)\\S+", RegexOptions.None).Match(tmp_row_raw).Result("$1").Length;
								}
								//–µ—Å–ª–∏ –ø–µ—Ä–≤–∞—è –Ω–µ–ø–æ–ª–Ω–∞—è
								if((tmp_row_hulfLenght > tmp_row_raw.Length)) {
									//–ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–Ω—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π
									_rowsUnparsed.Add(tmp_row_raw.Substring(0, tmp_row_raw.Length));
								} else {
									//–ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π
									_rowsUnparsed.Add(tmp_row_raw.Substring(0, tmp_row_hulfLenght));
									//–≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü. –∑–∞—Å–æ–≤—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—Ç—Ä–æ–∫—É
									_2thPart.Add(tmp_row_raw.Substring(tmp_row_hulfLenght, (tmp_row_raw.Length - tmp_row_hulfLenght)));
								}
							}
						}
						foreach(string loopObject4 in _2thPart) {
							if(Regex.IsMatch(loopObject4.TrimStart(), "^\\d{1,3}\\.")) {
								//–≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏
								_rowsUnparsed.Add(loopObject4);
							}
						}
					} else {
						tmp_ifNextMonth = "";
						//–Ω–µ–ø–∏–ª–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
						foreach(string loopObject5 in One_table_data.Split(System.Environment.NewLine, System.StringSplitOptions.None)) {
							tmp_row_raw = loopObject5;
							if(loopObject5.Trim().ToLower().Contains("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü".ToLower())) {
								//–µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Å—Ç—Ä–æ–∫–µ "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü"
								tmp_ifNextMonth = "";
							} else {
								_rowsUnparsed.Add(tmp_ifNextMonth + tmp_row_raw);
							}
						}
					}
				}
				break;
				default: {
					tmp_ifNextMonth = "";
					//–Ω–µ–ø–∏–ª–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
					foreach(string loopObject5 in One_table_data.Split(System.Environment.NewLine, System.StringSplitOptions.None)) {
						tmp_row_raw = loopObject5;
						if(loopObject5.Trim().ToLower().Contains("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü".ToLower())) {
							//–µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Å—Ç—Ä–æ–∫–µ "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü"
							tmp_ifNextMonth = "";
						} else {
							_rowsUnparsed.Add(tmp_ifNextMonth + tmp_row_raw);
						}
					}
				}
				break;
			}
			return _rowsUnparsed;
		}

		/// <summary>
		/// Extract all indexes of clmn delimiters
		/// </summary>
		private List<int> _alllndexOfDelimeters(List<string> _rowsUnparsed, string N_table) {
			string row = "";
			string[] table_data_splited = new string[0];
			HashSet<int> tmp_hash_ints = new HashSet<int>();
			switch(N_table) {
				case "12": {
					foreach(string loopObject6 in _rowsUnparsed) {
						if(Regex.IsMatch(loopObject6.Trim(), "^ *\\d{1,3}\\.")) {
							return Enumerable.ToList<System.Int32>(tmp_hash_ints);
						} else {
							row = loopObject6;
							//–ë–µ–≥–∞–µ—Ç –ø–æ —Å—Ç—Ä–æ–∫–µ - –∏—â–µ—Ç –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π
							for(index = row.IndexOfAny(new char[] { '‚ï¶', '‚î¨', '|', '¬¶' }); index > -1; index = row.IndexOfAny(new char[] { '‚î¨', '‚ï¶', '|', '¬¶' }, (index + 1))) {
								tmp_hash_ints.Add((index + 1));
							}
						}
					}
				}
				break;
				case "": {
				}
				break;
				case "": {
				}
				break;
				default: {
					foreach(string loopObject7 in _rowsUnparsed) {
						if(Regex.IsMatch(loopObject7, "^ *\\d{1,3}\\.")) {
							return Enumerable.ToList<System.Int32>(tmp_hash_ints);
						} else {
							row = loopObject7;
							//–ë–µ–≥–∞–µ—Ç –ø–æ —Å—Ç—Ä–æ–∫–µ - –∏—â–µ—Ç –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π
							for(index1 = row.IndexOfAny(new char[] { '‚ï¶', '‚î¨', '|', '¬¶' }); index1 > -1; index1 = row.IndexOfAny(new char[] { '‚î¨', '‚ï¶', '|', '¬¶' }, (index1 + 1))) {
								tmp_hash_ints.Add(index1);
							}
						}
					}
					return Enumerable.ToList<System.Int32>(tmp_hash_ints);
				}
				break;
			}
			foreach(int loopObject8 in tmp_hash_ints) {
				Debug.Log(loopObject8);
			}
			return Enumerable.ToList<System.Int32>(tmp_hash_ints);
		}

		/// <summary>
		/// –ü—Ä–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫-—è—á–µ–µ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, —á–∏—Å—Ç—ã–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
		/// </summary>
		public List<List<string>> parseRow(List<int> row_indexs_delimeters, List<string> _rowsUnparsed, string N_table, string N_year_N_month, string unParsedLine) {
			string tokenToSplitBy = "|";
			int insCount = -1;
			string line = "";
			int from = 0;
			int length = 0;
			int item = 0;
			List<List<string>> _tableParsed = new List<List<string>>();
			List<string> _rowsParsed = new List<string>();
			int tmp_startLine = 0;
			List<string> _22_tmp_row1 = new List<string>();
			List<string> _22_final_row = new List<string>();
			string _22_c_row_line = "";
			int _22_7th1 = 0;
			int _22_8th1 = 0;
			int _22_tmp1 = 0;
			row_indexs_delimeters.Sort();
			_tableParsed = new List<List<string>>();
			line = unParsedLine;
			if(Regex.IsMatch(line, "^ +‚ïê")) {
				//–°–¥–≤–∏–≥ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫—Ä–∏–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã N12, –≤—Ç–æ—Ä–æ–π –µ—ë –ø–æ–ª–æ–≤–∏–Ω—ã
				tmp_startLine = (line.Length - line.TrimStart().Length);
			}
			//–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–ø–∫—É –∏ –º—É—Å–æ—Ä –∏–∑ 22–π —Ç–∞–±–ª–∏—Ü—ã
			if(!(Regex.IsMatch(line.Trim(), "^—Ü–∞|–ú–µ—Å—è—Ü|–ü–µ—Ä–µ—Ö–æ–¥|[‚ïë‚ïü‚ï¶‚ï¢‚îú‚î¨‚î§‚îÇ|I‚ïê=]"))) {
				_rowsParsed = new List<string>();
				//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã
				if(!(((row_indexs_delimeters[0] > line.Length) || string.IsNullOrEmpty(line.Substring(row_indexs_delimeters[0], (line.Length - row_indexs_delimeters[0])).Trim())))) {
					if((row_indexs_delimeters[0] >= line.Length)) {
						Debug.Log("===== –¢–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –≤–æ–æ–±—â–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ—á–∫–∞====BD=" + tmp_db_name + "==" + "Table=" + N_table + "==YM=" + N_year_N_month + "===" + line.Trim());
					} else {
						if(string.IsNullOrEmpty(line.Substring(0, (row_indexs_delimeters[0] - 1)).TrimStart())) {
							//–¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
							tmp_line = tmp_db_name + line.Substring(tmp_db_name.Length, (line.Length - tmp_db_name.Length));
						} else {
							//–µ—Å–ª–∏ –Ω–µ "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü", —Ç.–µ. –æ–±—ã—á–Ω—ã–π
							tmp_name = Regex.Match(" " + line.Substring(0, (row_indexs_delimeters[0] - 1)).TrimStart(), "\\D*\\d+\\.(.+)", RegexOptions.None).Result("$1");
							//—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –±–¥, –Ω–∞ —Å–ª—É—á–∞–π –ø—É—Å—Ç–æ–π —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
							tmp_db_name = tmp_name.Trim().Replace(",", "_");
							tmp_line = line;
						}
						_rowsParsed.Add(tmp_db_name);
						for(int index2 = 0; index2 < (row_indexs_delimeters.Count - 1); index2 += 1) {
							from = (row_indexs_delimeters[index2] + tmp_startLine);
							length = (row_indexs_delimeters[(index2 + 1)] - from);
							//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ—á–∫—É. –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ @
							if((tmp_line.Length > from)) {
								if((tmp_line.Length >= (from + length))) {
									//–ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ –∏ –≤—Å—è —è—á–µ–π–∫–∞ —á—Ç–æ —Ç–æ –∏–º–µ–µ—Ç
									_rowsParsed.Add(tmp_line.Substring(from, length).Trim());
								} else {
									//–ï—Å–ª–∏ –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ —è—á–µ–π–∫–µ, –Ω–æ —á—Ç–æ —Ç–æ –µ—Å—Ç—å
									_rowsParsed.Add(tmp_line.Substring(from, (tmp_line.Length - from)).Trim());
								}
							} else {
								//–µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É
								_rowsParsed.Add("");
							}
						}
						//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ—á–∫—É. –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ @
						if((tmp_line.Length > row_indexs_delimeters[row_indexs_delimeters.Count - 1])) {
							if((tmp_line.Length >= (row_indexs_delimeters[row_indexs_delimeters.Count - 1] + (tmp_line.Length - row_indexs_delimeters[row_indexs_delimeters.Count - 1])))) {
								//last. –µ—Å–ª–∏ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –º–µ—Å—Ç–µ.
								_rowsParsed.Add(tmp_line.Substring(row_indexs_delimeters[row_indexs_delimeters.Count - 1], (tmp_line.Length - row_indexs_delimeters[row_indexs_delimeters.Count - 1])).Trim());
							} else {
								//last. –µ—Å–ª–∏ –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
								_rowsParsed.Add(tmp_line.Substring(row_indexs_delimeters[row_indexs_delimeters.Count - 1], (tmp_line.Length - row_indexs_delimeters[row_indexs_delimeters.Count - 1])).Trim());
							}
						} else {
							//last. –µ—Å–ª–∏ —è—á–µ–π–∫–∞ —Å–æ–≤—Å–µ–º –ø—É—Å—Ç–∞—è
							_rowsParsed.Add("");
						}
						_tableParsed.Add(_rowsParsed);
					}
				}
			}
			return _tableParsed;
		}

		/// <summary>
		/// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ. 
		/// </summary>
		private bool sql_connect(string db_name) {
			string path1 = "";
			SqliteConnection connection = default(SqliteConnection);
			path1 = "" + "" + "Z:/" + db_name + ".sqlite";
			if(sql_Connections.ContainsKey(db_name)) {
				return true;
			} else {
				//–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π –±–¥ –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
				if(!(File.Exists(path1))) {
					File.Copy(Application.streamingAssetsPath + "/" + "files/" + "_empty" + ".sqlite", path1, false);
				}
				connection = new SqliteConnection("URI=file:" + path1);
				connection.Open();
				//–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
				sql_Connections.Add(db_name, connection);
			}
			return File.Exists(path1);
		}

		/// <summary>
		/// –Ω–∏—Ñ–∏–≥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—á–µ–º—É —Ç–æ, –Ω–∞ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü.
		/// </summary>
		public void sql_close() {
			foreach(KeyValuePair<string, SqliteCommand> loopObject9 in sql_cmnds) {
				loopObject9.Value.Dispose();
			}
			foreach(KeyValuePair<string, SqliteConnection> loopObject10 in sql_Connections) {
				loopObject10.Value.Dispose();
			}
			SqliteConnection.ClearAllPools();
			System.GC.Collect();
			System.GC.WaitForPendingFinalizers();
			SqliteConnection.ClearAllPools();
			System.GC.Collect();
			System.GC.WaitForPendingFinalizers();
			sql_Connections = new Dictionary<string, SqliteConnection>();
			sql_readers = new Dictionary<string, SqliteDataReader>();
			sql_cmnds = new Dictionary<string, SqliteCommand>();
		}

		/// <summary>
		/// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ –±–¥
		/// –ù–µ–Ω—É–∂–µ–Ω?
		/// </summary>
		private List<string> sql_master_tables(string db_name) {
			List<string> tables = new List<string>();
			tables.Clear();
			if(sql_connect(db_name)) {
				using(SqliteCommand value = sql_Connections[db_name].CreateCommand()) {
					sql_cmnds.Add(db_name, value);
					sql_cmnds[db_name].CommandText = "SELECT name FROM sqlite_master WHERE type='table'";
					sql_readers.Add(db_name, sql_cmnds[db_name].ExecuteReader());
					while(sql_readers[db_name].Read()) {
						tables.Add(sql_readers[db_name].GetString(0));
					}
				}
			}
			return tables;
		}

		/// <summary>
		/// –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –≤—Å—Ç–∞–≤–∫—É
		/// </summary>
		private int sql_insertQ(string db_name, string q) {
			int sql_writed = 0;
			SqliteCommand cmnd = new SqliteCommand();
			if(sql_connect(db_name)) {
				using(SqliteCommand value1 = sql_Connections[db_name].CreateCommand()) {
					cmnd = value1;
					cmnd.CommandText = q;
					sql_writed = cmnd.ExecuteReader().RecordsAffected;
				}
			} else {
				new _utillz()._2log("sql_insertQ.connect.error", true);
			}
			return sql_writed;
		}

		/// <summary>
		/// –û—Å–Ω–æ–≤–Ω–æ–π –≤—Å—Ç–∞–≤—â–∏–∫ –¢–∞–±–ª–∏—Ü –≤ –±–¥.
		/// –°–¥–µ–ª–∞—Ç—å –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Ç—É—Ç? => –ø—Ä–æ–±—É—é –∑–∞—Ñ–∏–≥–∞—á–∏—Ç—å –±–µ–∑—à–∞–ø–æ—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
		/// </summary>
		public System.Collections.IEnumerator sql_insertTables(List<List<string>> q_table, string N_table, string N_year_N_month) {
			List<string> row1 = new List<string>();
			string db_name1 = "";
			string q = "";
			string tmp_1thCLMN = "";
			foreach(List<string> loopObject11 in q_table) {
				row1 = loopObject11;
				db_name1 = bd_names[row1[0].ToLower()];
				//—É–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–¥ –∏–∑ —Å—Ç—Ä–æ–∫–∏. –Ω–µ–Ω—É–∂–Ω–æ
				row1.RemoveAt(0);
				//set Q in N11 table
				switch(N_table) {
					case "0": {
					}
					break;
					case "1": {
						tmp_1thCLMN = N_year_N_month;
						q = "INSERT OR IGNORE INTO '" + N_table + "' " + "VALUES ('" + tmp_1thCLMN + "','" + string.Join<System.String>("','", row1) + "')";
					}
					break;
					case "2": {
						tmp_1thCLMN = N_year_N_month;
						q = "INSERT OR IGNORE INTO '" + N_table + "' " + "VALUES ('" + tmp_1thCLMN + "','" + string.Join<System.String>("','", row1) + "')";
					}
					break;
					case "3": {
					}
					break;
					case "4": {
						tmp_1thCLMN = N_year_N_month;
						q = "INSERT OR IGNORE INTO '" + N_table + "' " + "VALUES ('" + tmp_1thCLMN + "','" + string.Join<System.String>("','", row1) + "')";
					}
					break;
					case "5": {
					}
					break;
					case "6": {
						tmp_1thCLMN = N_year_N_month;
						q = "INSERT OR IGNORE INTO '" + N_table + "' " + "VALUES ('" + tmp_1thCLMN + "','" + string.Join<System.String>("','", row1) + "')";
					}
					break;
					case "7": {
						tmp_1thCLMN = N_year_N_month;
						q = "INSERT OR IGNORE INTO '" + N_table + "' " + "VALUES ('" + tmp_1thCLMN + "','" + string.Join<System.String>("','", row1) + "')";
					}
					break;
					case "8": {
						tmp_1thCLMN = N_year_N_month;
						q = "INSERT OR IGNORE INTO '" + "7" + "' " + "VALUES ('" + tmp_1thCLMN + "','" + string.Join<System.String>("','", row1) + "')";
					}
					break;
					case "9": {
					}
					break;
					case "10": {
					}
					break;
					case "11_1": {
						tmp_1thCLMN = N_year_N_month;
						//N11_1
						q = "INSERT OR IGNORE INTO '" + "11" + "' " + "('Year_Month','–î–õ','–î–ñ','–ú–†','–õ–î','–ñ–û','–°','–°–õ','–ó–°','–ö–°','–ö–õ','–¢–û','–°–ú','–°–õ–ú','–¢–û–ú','–ì–î','–ò–õ','–†','–ò','–ì–õ','–ò–ó–ú','–ì–õ–¶','–î–ú','–¢','–¢–ü')" + " VALUES ('" + tmp_1thCLMN + "','" + string.Join<System.String>("','", row1) + "')";
					}
					break;
					case "11_2": {
						tmp_1thCLMN = N_year_N_month;
						//N11_2
						q = "INSERT OR IGNORE INTO '" + "11" + "' " + "('Year_Month','–¢–õ','–¢–õ–ü','–¢–ó','–¢–õ–ó','–¢–û–°','–¢–ó–û','–¢–¢','–¢–¢–û','–ú–ì–°','–ü','–ú–°','–ú–û','–ú–ù','–ú–ú','–ú–ì','–ü–ü','–ü–ë','–ü–´–õ','–ì','–ü–°','–®','–í','–°–ß','–ú–ñ')" + " VALUES ('" + tmp_1thCLMN + "_p2','" + string.Join<System.String>("','", row1) + "')";
					}
					break;
					case "12": {
						//======================
						tmp_1thCLMN = N_year_N_month;
						switch(row1.Count) {
							case 9: {
								//N12 –¥–ª—è –ø–æ–ª–æ–≤–∏–Ω–Ω—ã—Ö(–¥–≤–æ–π–Ω—ã—Ö) —Ç–∞–±–ª–∏—Ü. –≤ N11
								q = "INSERT OR IGNORE INTO '" + "11" + "' " + "('Year_Month','–î–ñ','–°','–°–ú','–¢–¢','–ò–ó–ú','–ì–õ','–ú–ú','–ì–î','–ì')" + " VALUES ('" + tmp_1thCLMN + "','" + string.Join<System.String>("','", row1) + "')";
							}
							break;
							case 15: {
								//N12 –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü. –≤ N11
								q = "INSERT OR IGNORE INTO '" + "11" + "' " + "('Year_Month','–î–ñ','–°','–°–ú','–¢–¢','–ò–ó–ú','–ì–õ','–ú–ú','–ì–î','–ì','–î–ú','–ü–ú','–ü–ë','–ú–ì','–°–ß','–®')" + " VALUES ('" + tmp_1thCLMN + "','" + string.Join<System.String>("','", row1) + "')";
							}
							break;
						}
					}
					break;
					case "13": {
						tmp_1thCLMN = N_year_N_month;
						//N13
						q = "INSERT OR IGNORE INTO '" + "13" + "' ('Year_Month','" + "–î–õ','–ñ–û','–¢–û','–¢–û–ú','–ò–ó–ú','–ì–õ','–†','–ò','–ì–õ–¶','–î–ú','–¢–¢','–¢–¢–û','–ü','–ú–ù','–ú–ú','–ú–ì','–ü–´–õ','–ì" + "') VALUES ('" + tmp_1thCLMN + "','" + string.Join<System.String>("','", row1) + "')";
					}
					break;
					case "14": {
						tmp_1thCLMN = N_year_N_month + "_d" + row1[0] + "_h:m=" + Regex.Replace(row1[1], " +", ":");
						//N14&N15
						q = "INSERT OR IGNORE INTO '" + "14" + "' " + "VALUES ('" + tmp_1thCLMN + "','" + string.Join<System.String>("','", row1) + "')";
					}
					break;
					case "15": {
						tmp_1thCLMN = N_year_N_month + "_d" + row1[0] + "_h:m=" + Regex.Replace(row1[1], " +", ":");
						//N14&N15
						q = "INSERT OR IGNORE INTO '" + "14" + "' " + "VALUES ('" + tmp_1thCLMN + "','" + string.Join<System.String>("','", row1) + "')";
					}
					break;
					case "16": {
						tmp_1thCLMN = N_year_N_month + "_d" + row1[6] + "_trace:" + row1[5];
						//N16&N17
						q = "INSERT OR IGNORE INTO '" + "16" + "' " + "VALUES ('" + tmp_1thCLMN + "','" + string.Join<System.String>("','", row1) + "')";
					}
					break;
					case "17": {
						tmp_1thCLMN = N_year_N_month + "_d" + row1[6] + "_trace:" + row1[5];
						//N16&N17
						q = "INSERT OR IGNORE INTO '" + "16" + "' " + "VALUES ('" + tmp_1thCLMN + "','" + string.Join<System.String>("','", row1) + "')";
					}
					break;
					case "20": {
						tmp_1thCLMN = N_year_N_month;
						q = "INSERT OR IGNORE INTO '" + N_table + "' " + "VALUES ('" + tmp_1thCLMN + "','" + string.Join<System.String>("','", row1) + "')";
					}
					break;
					case "21_2": {
						tmp_1thCLMN = N_year_N_month;
						//N21_2
						q = "INSERT OR IGNORE INTO '" + "21" + "' " + "('N_year_N_month','020_mid', '020_max', '020_min', '040_mid', '040_max', '040_min', '080_mid', '080_max', '080_min', '120_mid', '120_max', '120_min')" + " VALUES ('" + tmp_1thCLMN + "','" + string.Join<System.String>("','", row1) + "')";
					}
					break;
					case "21_3": {
						tmp_1thCLMN = N_year_N_month;
						//N21_2
						q = "INSERT OR IGNORE INTO '" + "21" + "' " + "('N_year_N_month','160_mid', '160_max', '160_min', '240_mid', '240_max', '240_min', '320_mid', '320_max', '320_min', 'dayFrz_002', 'dayFrz_005', 'dayFrz_010', 'dayFrz_015', 'dayFrz_02', 'dayFrz_04', 'dayFrz_08', 'dayFrz_12', 'dayFrz_16', 'dayFrz_24', 'dayFrz_32')" + " VALUES ('" + tmp_1thCLMN + "_p2','" + string.Join<System.String>("','", row1) + "')";
					}
					break;
					case "7a": {
					}
					break;
					case "22": {
						row1.RemoveAt(0);
						tmp_1thCLMN = N_year_N_month + "_key" + string.Join<System.String>("", row1);
						//N22
						q = "INSERT OR IGNORE INTO '" + N_table + "' " + "VALUES ('" + tmp_1thCLMN + "','" + string.Join<System.String>("','", row1) + "')";
					}
					break;
					default: {
						q = "";
					}
					break;
				}
				if((q.Length > 10)) {
					//–µ—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä
					if(sql_insertQ(db_name1, q).Equals(0)) {
						yield return new WaitForEndOfFrame();
						//–ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Ç–æ –¥—É–±–ª–∏—Ä—É–µ–º
						if(!(sql_doublers(q, db_name1))) {
							//–µ—Å–ª–∏–ø—Ä—è–º—å –∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ –¥—É–±–ª–∏–∫–∞—Ç –µ—Å—Ç—å, –∂–∂–µ—Å—Ç—å
							Debug.Log("1–ü–æ–≤—Ç–æ—Ä –≤ –±–¥:===" + db_name1 + "===" + N_table + "===" + q);
							//–µ—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä
							if(sql_insertQ(db_name1, q.Replace(N_year_N_month, N_year_N_month + "_double")).Equals(0)) {
								//–µ—Å–ª–∏–ø—Ä—è–º—å –∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ –¥—É–±–ª–∏–∫–∞—Ç –µ—Å—Ç—å, –∂–∂–µ—Å—Ç—å
								Debug.Log("2–ü–æ–≤—Ç–æ—Ä –≤ –±–¥:===" + db_name1 + "===" + N_table + "===" + q);
							}
						}
					}
				}
			}
			return 0;
		}

		/// <summary>
		/// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ –±–¥
		/// not need?
		/// </summary>
		private string sql_headers(string db_name, string N_table) {
			SqliteCommand cmnd1 = new SqliteCommand();
			SqliteDataReader reader = default(SqliteDataReader);
			string _1thCLMN = "";
			if(sql_connect(db_name)) {
				cmnd1 = sql_Connections[db_name].CreateCommand();
				cmnd1.CommandText = "SELECT name FROM pragma_table_info('" + N_table + "') ";
				reader = cmnd1.ExecuteReader();
				_1thCLMN = (reader.GetValue(0) as string);
			}
			return _1thCLMN;
		}

		public void button() {
			bd_names();
			Files = Directory.GetFiles("Z:\\", "*.txt");
			objectVariable3.gameObject.GetComponent<TMPro.TMP_Text>().text = Files.Length.ToString();
			base.StartCoroutine(loadFromFiles());
		}

		public void bd_names() {
			bd_names.Clear();
			//–°–ø–∏—Å–æ–∫ –Ω–∞ –∑–∞–º–µ–Ω—É –Ω–∞–∑–≤–∞–Ω–∏–π —Å "—Ä—É—Å—Å–∫–æ–≥–æ" –Ω–∞ –†—É—Å—Å–∫–∏–π
			foreach(string loopObject12 in File.ReadAllText(Application.streamingAssetsPath + "/" + "tmp.txt").Split(System.Environment.NewLine, System.StringSplitOptions.RemoveEmptyEntries)) {
				if(!(bd_names.ContainsKey(loopObject12.Split(new char[] { '=' })[1].ToLower()))) {
					bd_names.Add(loopObject12.Split(new char[] { '=' })[1].ToLower(), loopObject12.Split(new char[] { '=' })[0]);
				}
			}
		}

		private void Start() {}

		/// <summary>
		/// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
		/// </summary>
		private List<List<string>> sql_getListList(string db_name, string q) {
			List<string> row2 = new List<string>();
			List<List<string>> table1 = new List<List<string>>();
			string variable2 = "";
			table1 = new List<List<string>>();
			if(sql_connect(db_name)) {
				using(SqliteCommand value2 = sql_Connections[db_name].CreateCommand()) {
					sql_cmnds.Add(db_name, value2);
					sql_cmnds[db_name].CommandText = q;
					sql_readers.Add(db_name, sql_cmnds[db_name].ExecuteReader());
					while(sql_readers[db_name].Read()) {
						for(int index3 = 0; index3 < sql_readers[db_name].FieldCount; index3 += 1) {
							//–ø–æ–ø–∞–¥–∞—é—Ç—Å—è null, –ø–æ—ç—Ç–æ–º—É –≤—Ä—É—á–Ω—É—é –ø—É—Å—Ç–æ–π —Å—Ç—Ä–∏–Ω–≥ –Ω–∞–∑–Ω–∞—á–∞–µ–º
							if(sql_readers[db_name].IsDBNull(index3)) {
								row2.Add("");
							} else {
								row2.Add(sql_readers[db_name].GetString(index3));
							}
						}
						table1.Add(row2);
						row2 = new List<string>();
					}
				}
			}
			sql_close();
			return table1;
		}

		/// <summary>
		/// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–æ–≤ –∏–∑ –±–¥
		/// </summary>
		private bool sql_doublers(string q, string db_name) {
			SqliteCommand cmnd2 = new SqliteCommand();
			SqliteDataReader reader1 = default(SqliteDataReader);
			string num_table = "";
			List<string> newValues = new List<string>();
			List<string> Ns_Table = new List<string>();
			string _1thHead = "";
			List<List<string>> tmp_oldList = new List<List<string>>();
			string value_data = "";
			string value_clmns = "";
			if(Regex.IsMatch(q, "'([A-—è0-9_.-]+)' *VALUES *\\('([A-—è0-9_.:= -]+)'")) {
				num_table = new Regex("'([A-—è0-9_.-]+)' *VALUES *\\('([A-—è0-9_.:= -]+)'", RegexOptions.Multiline).Match(q).Result("$1");
				value_data = new Regex("'([A-—è0-9_.-]+)' *VALUES *\\('([A-—è0-9_.:= -]+)'", RegexOptions.Multiline).Match(q).Result("$2");
				//set Q in N11 table
				switch(num_table) {
					case "0": {
					}
					break;
					case "1": {
						_1thHead = "N_year_N_month";
					}
					break;
					case "2": {
						_1thHead = "N_year_N_month";
					}
					break;
					case "3": {
					}
					break;
					case "4": {
						_1thHead = "N_year_N_month";
					}
					break;
					case "5": {
					}
					break;
					case "6": {
						_1thHead = "N_year_N_month";
					}
					break;
					case "7": {
						_1thHead = "N_year_N_month";
					}
					break;
					case "8": {
					}
					break;
					case "9": {
					}
					break;
					case "10": {
					}
					break;
					case "11_1": {
						_1thHead = "Year_Month_Key";
					}
					break;
					case "11_2": {
						_1thHead = "Year_Month_Key";
					}
					break;
					case "12": {
					}
					break;
					case "13": {
						_1thHead = "Year_Month";
					}
					break;
					case "14": {
						_1thHead = "Year_Month_Key";
					}
					break;
					case "15": {
					}
					break;
					case "16": {
						_1thHead = "N_year_N_month_N_day_trace";
					}
					break;
					case "17": {
					}
					break;
					case "20": {
						_1thHead = "N_year_N_month";
					}
					break;
					case "21_2": {
						_1thHead = "N_year_N_month";
					}
					break;
					case "21_3": {
						_1thHead = "N_year_N_month";
					}
					break;
					case "7a": {
					}
					break;
					case "22": {
						_1thHead = "Year_Month_Key";
					}
					break;
					case "11": {
						_1thHead = "Year_Month";
					}
					break;
					case "21": {
						_1thHead = "N_year_N_month";
					}
					break;
					default: {
						Debug.Log("–ù–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π –ø–µ—Ä–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤!==" + value_data);
						_1thHead = value_data;
					}
					break;
				}
				newValues = Enumerable.ToList<System.String>(new Regex("VALUES \\(('.+')\\)", RegexOptions.None).Match(q).Result("$1").Replace("'", "").Split(new char[] { ',' }));
				foreach(List<string> loopObject13 in sql_getListList(db_name, "SELECT * FROM '" + num_table + "' WHERE  \"" + _1thHead + "\" LIKE '%" + value_data + "%'")) {
					for(index4 = 1; index4 < loopObject13.Count; index4 += 1) {
						if(!(loopObject13[index4].Equals(newValues[index4]))) {
							//–ï—Å—Ç—å –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
							return false;
						}
					}
					//–í—Å—ë —Å–æ–≤–ø–∞–¥–∞–µ—Ç
					return true;
				}
			} else if(Regex.IsMatch(q, "'([A-—è0-9_.-]+)' *\\(([A-—è0-9_.,':= -]+)\\) *VALUES *\\(([A-—è0-9_.,':= -]+)")) {
				num_table = new Regex("'([A-—è0-9_.-]+)' *\\(([A-—è0-9_.,':= -]+)\\) *VALUES *\\(([A-—è0-9_.,':= -]+)", RegexOptions.Multiline).Match(q).Result("$1");
				value_clmns = new Regex("'([A-—è0-9_.-]+)' *\\(([A-—è0-9_.,':= -]+)\\) *VALUES *\\(([A-—è0-9_.,':= -]+)", RegexOptions.Multiline).Match(q).Result("$2").Replace("'", "\"");
				value_data = new Regex("'([A-—è0-9_.-]+)' *\\(([A-—è0-9_.,':= -]+)\\) *VALUES *\\(([A-—è0-9_.,':= -]+)", RegexOptions.Multiline).Match(q).Result("$3").Replace("'", "");
				//set Q in N11 table
				switch(num_table) {
					case "0": {
					}
					break;
					case "1": {
						_1thHead = "N_year_N_month";
					}
					break;
					case "2": {
						_1thHead = "N_year_N_month";
					}
					break;
					case "3": {
					}
					break;
					case "4": {
						_1thHead = "N_year_N_month";
					}
					break;
					case "5": {
					}
					break;
					case "6": {
						_1thHead = "N_year_N_month";
					}
					break;
					case "7": {
						_1thHead = "N_year_N_month";
					}
					break;
					case "8": {
					}
					break;
					case "9": {
					}
					break;
					case "10": {
					}
					break;
					case "11_1": {
						_1thHead = "Year_Month_Key";
					}
					break;
					case "11_2": {
						_1thHead = "Year_Month_Key";
					}
					break;
					case "12": {
					}
					break;
					case "13": {
						_1thHead = "Year_Month";
					}
					break;
					case "14": {
						_1thHead = "Year_Month_Key";
					}
					break;
					case "15": {
					}
					break;
					case "16": {
						_1thHead = "N_year_N_month_N_day_trace";
					}
					break;
					case "17": {
					}
					break;
					case "20": {
						_1thHead = "N_year_N_month";
					}
					break;
					case "21_2": {
						_1thHead = "N_year_N_month";
					}
					break;
					case "21_3": {
						_1thHead = "N_year_N_month";
					}
					break;
					case "7a": {
					}
					break;
					case "22": {
						_1thHead = "Year_Month_Key";
					}
					break;
					case "11": {
						_1thHead = "Year_Month";
					}
					break;
					case "21": {
						_1thHead = "N_year_N_month";
					}
					break;
					default: {
						Debug.Log("–ù–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π –ø–µ—Ä–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤!==" + value_data);
						_1thHead = value_data;
					}
					break;
				}
				newValues = Enumerable.ToList<System.String>(value_data.Split(new char[] { ',' }));
				foreach(List<string> loopObject14 in sql_getListList(db_name, "SELECT " + value_clmns + " FROM '" + num_table + "' WHERE \"" + _1thHead + "\" LIKE '%" + value_data.Split(new char[] { ',' })[0] + "%'")) {
					for(index5 = 1; index5 < loopObject14.Count; index5 += 1) {
						if(!(loopObject14[index5].Equals(newValues[index5]))) {
							//–ï—Å—Ç—å –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
							return false;
						}
					}
					//–í—Å—ë —Å–æ–≤–ø–∞–¥–∞–µ—Ç
					return true;
				}
			} else {
				Debug.Log("error_doublers:" + q);
			}
		}

		public List<string> parseRow2List(string row) {
			List<string> ret = new List<string>();
			Regex regex_cl = default(Regex);
			string row_l = "";
			int r_from = 0;
			int r_l = 0;
			delimetrs.Sort();
			regex_cl = new Regex("[‚ïë‚ïü‚ï¶‚ï¢‚îú‚î¨‚î§‚îÇ|I‚ïê=]*");
			row_l = row;
			ret.Add(regex_cl.Replace(row_l.Substring(0, delimetrs[0]), ""));
			//–æ—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ —Ä–∞—Å–ø–∞—Ä—Å–∞ —Å—Ç—Ä–æ–∫–∏
			for(int index6 = 0; index6 < (delimetrs.Count - 1); index6 += 1) {
				r_from = delimetrs[index6];
				r_l = (delimetrs[(index6 + 1)] - r_from);
				//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ—á–∫—É. –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ @
				if((row_l.Length > r_from)) {
					if((row_l.Length >= (r_from + r_l))) {
						ret.Add(regex_cl.Replace(row_l.Substring(r_from, r_l), ""));
					} else {
						ret.Add(regex_cl.Replace(row_l.Substring(r_from, (row_l.Length - r_from)), ""));
					}
				} else {
					ret.Add("");
				}
			}
			//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ—á–∫—É. –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ @
			if((row_l.Length > delimetrs[delimetrs.Count - 1])) {
				if((row_l.Length >= (delimetrs[delimetrs.Count - 1] + (row_l.Length - delimetrs[delimetrs.Count - 1])))) {
					ret.Add(regex_cl.Replace(row_l.Substring(delimetrs[delimetrs.Count - 1], (row_l.Length - delimetrs[delimetrs.Count - 1])), ""));
				} else {
					ret.Add(regex_cl.Replace(row_line.Substring(delimetrs[delimetrs.Count - 1], (row_l.Length - delimetrs[delimetrs.Count - 1])), ""));
				}
			} else {
				ret.Add("");
			}
			return ret;
		}

		/// <summary>
		/// –ü—Ä–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫-—è—á–µ–µ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, —á–∏—Å—Ç—ã–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
		/// </summary>
		public System.Collections.IEnumerator parseRow22t(List<int> row_indexs_delimeters, List<string> _rowsUnparsed, string N_table, string N_year_N_month, string unParsedLine) {
			string tokenToSplitBy1 = "|";
			int insCount1 = -1;
			string line1 = "";
			int from1 = 0;
			int length1 = 0;
			int item1 = 0;
			List<List<string>> _tableParsed1 = new List<List<string>>();
			List<string> _rowsParsed1 = new List<string>();
			int tmp_startLine1 = 0;
			List<string> _22_tmp_row = new List<string>();
			List<string> _22_final_row1 = new List<string>();
			string _22_c_row_line1 = "";
			int _22_7th = 0;
			int _22_8th = 0;
			int _22_9th = 0;
			int _22_tmp = 0;
			List<List<string>> _22_final_table = default(List<List<string>>);
			List<string> lastListRow = default(List<string>);
			string _4sqlValue = "";
			string key = "";
			string tmpKey = "";
			string q1 = "";
			string tmp_name_bd = "";
			List<string> variable23 = new List<string>() { "", "", "", "", "" };
			_tableParsed1 = new List<List<string>>();
			_rowsParsed1 = new List<string>();
			//–û—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∏—à–Ω–µ–≥–æ
			foreach(string loopObject15 in _rowsUnparsed) {
				line1 = loopObject15;
				//–Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫. —á–∏—Å—Ç—ã–π
				if(!((((line1.Contains("–ì–û–õ–û–õ–ï–î–ù–û") || string.IsNullOrWhiteSpace(line1)) || Regex.IsMatch(line1, "[‚ïë‚ïü‚ï¶‚ï¢‚îú‚î¨‚î§‚îÇ|I‚ïê=]")) || line1.Contains("–ú–µ—Å—è—Ü")))) {
					_rowsParsed1.Add(line1);
				}
			}
			yield return new WaitForEndOfFrame();
			_22_final_table = new List<List<string>>();
			//–ø–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
			foreach(string loopObject16 in _rowsParsed1) {
				_22_tmp_row = parseRow2List(loopObject16);
				if(string.Join("", _22_tmp_row).Contains("–ü–µ—Ä–µ—Ö–æ–¥")) {
					variable23[0] = _22_tmp_row[0];
					_22_final_table.Add(variable23);
				} else if(string.IsNullOrWhiteSpace(_22_tmp_row[1].Trim())) {
					//–ï—Å–ª–∏ —Å—Ç—Ä–æ—á–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—É—Å—Ç–æ—Ç—ã=–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
					if(int.TryParse(_22_tmp_row[7], out _22_tmp)) {
						//6–π —Å—Ç–æ–±–µ—Ü
						if((_22_7th < _22_tmp)) {
							_22_7th = _22_tmp;
							_22_final_table[_22_final_table.Count - 1][7] = _22_7th.ToString();
						}
					} else {
						Debug.Log("7–π —Å—Ç–æ–ª–±–µ–π –Ω–µ –ø–∞—Ä—Å–∞–Ω—É–ª—Å—è! " + _22_tmp_row[7] + "=" + string.Join("+", _22_tmp_row));
					}
					//–ï—Å–ª–∏ —Å—Ç—Ä–æ—á–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—É—Å—Ç–æ—Ç—ã=–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
					if(int.TryParse(_22_tmp_row[8], out _22_tmp)) {
						//7–π —Å—Ç–æ–ª–±–µ—Ü
						if((_22_8th < _22_tmp)) {
							_22_8th = _22_tmp;
							_22_final_table[_22_final_table.Count - 1][8] = _22_8th.ToString();
						}
					} else {
						Debug.Log("8–π —Å—Ç–æ–ª–±–µ–π –Ω–µ –ø–∞—Ä—Å–∞–Ω—É–ª—Å—è! " + _22_tmp_row[8] + "=" + string.Join("+", _22_tmp_row));
					}
					//–ï—Å–ª–∏ —Å—Ç—Ä–æ—á–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—É—Å—Ç–æ—Ç—ã=–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
					if(int.TryParse(_22_tmp_row[9], out _22_tmp)) {
						//7–π —Å—Ç–æ–ª–±–µ—Ü
						if((_22_9th < _22_tmp)) {
							_22_9th = _22_tmp;
							_22_final_table[_22_final_table.Count - 1][9] = _22_9th.ToString();
						}
					}
				} else {
					int.TryParse(_22_tmp_row[7], out _22_7th);
					int.TryParse(_22_tmp_row[8], out _22_8th);
					int.TryParse(_22_tmp_row[9], out _22_9th);
					_22_final_table.Add(_22_tmp_row);
				}
			}
			yield return new WaitForEndOfFrame();
			yield return new WaitForEndOfFrame();
			//—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è/–≤ dict`s
			foreach(List<string> loopObject17 in _22_final_table) {
				lastListRow = loopObject17;
				//–ü–æ–¥–Ω–∏–º–∞–µ–º –±—É–∫–≤—ã, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ –¥—Ä—É–≥–æ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö - –æ–Ω–∏ –ø–æ—á–µ–º—É —Ç–æ –ø–æ–¥–Ω—è—Ç—ã.
				lastListRow[2] = lastListRow[2].ToUpper();
				if(!(lastListRow[0].Equals(post_name))) {
					if(string.IsNullOrWhiteSpace(lastListRow[0])) {
						//–ü–æ–¥–Ω–∏–º–∞–µ–º –±—É–∫–≤—ã, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ –¥—Ä—É–≥–æ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö - –æ–Ω–∏ –ø–æ—á–µ–º—É —Ç–æ –ø–æ–¥–Ω—è—Ç—ã.
						lastListRow[0] = post_name;
					} else {
						post_name = lastListRow[0].Trim();
					}
				}
				if(!((lastListRow.Count < 10))) {
					//–∫—É—Å–æ–∫ –¥–ª—è 2016+ –≥–æ–¥–æ–≤
					if(Regex.IsMatch(post_name, "^\\s*(\\S+) *(\\d{4})")) {
						N_year_N_month = "y" + Regex.Match(post_name, "^\\s*(\\S+) *(\\d{4})", RegexOptions.None).Result("$2") + "_m" + months[Regex.Match(post_name, "^\\s*(\\S+) *(\\d{4})", RegexOptions.None).Result("$1")];
					} else {
						if(string.IsNullOrWhiteSpace(N_year_N_month)) {
							N_year_N_month = N_year_N_month_FromHeader;
						}
						if(string.IsNullOrWhiteSpace(lastListRow[0])) {
							Debug.Log("–ü—É—Å—Ç–∞—è –ª–∏–Ω–∏—è –≤ 22–π —Ç–∞–±–ª–∏—Ü–µ!");
						} else {
							tmp_name_bd = Regex.Match(lastListRow[0], "\\D*\\d+\\.(.+)", RegexOptions.None).Result("$1").Trim().Replace(',', '_').ToLower();
							if(bd_names.ContainsKey(tmp_name_bd)) {
								db_name = bd_names[tmp_name_bd];
								lastListRow.RemoveAt(1);
								lastListRow.RemoveAt(0);
								//N22
								q1 = "INSERT OR IGNORE INTO '" + N_table + "' " + "VALUES ('" + "" + "" + N_year_N_month + "" + "" + "_k" + string.Join("", Enumerable.Select<System.String, System.String>(lastListRow, (string parameterValues) => {
									return parameterValues.Trim();
								})) + "','" + string.Join("','", Enumerable.Select<System.String, System.String>(lastListRow, (string parameterValues) => {
									return parameterValues.Trim();
								})) + "')";
								if((q1.Length > 10)) {
									//–µ—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä
									if(sql_insertQ(db_name, q1).Equals(0)) {
										//–ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Ç–æ –¥—É–±–ª–∏—Ä—É–µ–º
										if(!(sql_doublers(q1, db_name))) {
											//–µ—Å–ª–∏–ø—Ä—è–º—å –∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ –¥—É–±–ª–∏–∫–∞—Ç –µ—Å—Ç—å, –∂–∂–µ—Å—Ç—å
											Debug.Log("1–ü–æ–≤—Ç–æ—Ä –≤ –±–¥:===" + db_name + "===" + N_table + "===" + q1);
											//–µ—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä
											if(sql_insertQ(db_name1, q1.Replace(N_year_N_month, N_year_N_month + "_double")).Equals(0)) {
												//–µ—Å–ª–∏–ø—Ä—è–º—å –∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ –¥—É–±–ª–∏–∫–∞—Ç –µ—Å—Ç—å, –∂–∂–µ—Å—Ç—å
												Debug.Log("2–ü–æ–≤—Ç–æ—Ä –≤ –±–¥:===" + db_name + "===" + N_table + "===" + q1);
											}
										}
									}
								}
							} else {
								Debug.Log(tmp_name_bd);
							}
						}
						yield return new WaitForEndOfFrame();
					}
				}
			}
			return _tableParsed1;
		}
	}
}
